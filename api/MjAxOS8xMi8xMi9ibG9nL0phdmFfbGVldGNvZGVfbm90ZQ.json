{"title":"Leetcode算法题集(Java)","date":"2019-12-13T05:00:00.000Z","date_formatted":{"ll":"Dec 13, 2019","L":"12/13/2019","MM-DD":"12-13"},"author":"Qingfeng Zhang","link":"2019/12/12/blog/Java_leetcode_note","categories":["Algorithm"],"updated":"2025-05-07T15:33:02.905Z","content":"<p>2019年12月13日，Leetcode上数组部分的简单题已经用java做完，在接下来做动态规划的简单题和继续做数组之间我选择了后者，因为没必要一直揪着简单题，越是怕就越要把它做掉。虽然之前也没有写几篇题解，但这里还是新开了一篇用来记录做中等题的题解。</p>\n<h1 id=\"1.-多数和问题\">1. 多数和问题<a title=\"#1.-多数和问题\" href=\"#1.-多数和问题\"></a></h1>\n<p>最近两天连续做到关于多数和的问题，一般是给定一个数组nums和一个目标数target，找出数组中三个数（或四个数）的和等于target的所有结果，也有一些问题会不要求相等，只要求最接近；<br>\n第一次做是用Python写的，但是完全没头绪，两数和、三数和，现在又来个四数和。。。但是做过之后，现在再做就很简单了，因为基本就一个思路：<strong>先排序，套循环结构，最后两个循环可以用前后双指针代替</strong><br>\n，如果不用双指针的话，三数和的时间复杂度就是 O(n^3) ，四数和的时间复杂度是 O(n^4)<br>\n，这样做的话铁定超时，所以要先排序，对排序后的数组用前后双指针，当前后指针所指的数之和<strong>大于目标值</strong><br>\n（一般是target减去前去一个或两个数），就令<code>r--</code>，如果<strong>小于目标值</strong> ，就令<code>l++</code>；</p>\n<h2 id=\"no.15-三数之和\">NO.15 三数之和<a title=\"#no.15-三数之和\" href=\"#no.15-三数之和\"></a></h2>\n<p>题目和上述的一样，在nums中找三个数的和等于target，找出所有的三元组，不能重复，返回一个二维List;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">threeSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        Arrays.sort(nums);  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">2</span>;i++)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> -nums[i];  </span><br><span class=\"line\">            <span class=\"type\">int</span> l=i+<span class=\"number\">1</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[l]+nums[r]==tmp)&#123;  </span><br><span class=\"line\">                    List&lt;Integer&gt; L = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">                    L.add(nums[i]);  </span><br><span class=\"line\">                    L.add(nums[l++]);  </span><br><span class=\"line\">                    L.add(nums[r--]);  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(!result.contains(L))&#123;result.add(L);&#125;  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[l]+nums[r]&gt;tmp)&#123;r--;&#125;  </span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;l++;&#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.16-最接近的三数之和\">NO.16 最接近的三数之和<a title=\"#no.16-最接近的三数之和\" href=\"#no.16-最接近的三数之和\"></a></h2>\n<p>在nums中找到三个数的和与target最接近，返回这三个数的和；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">threeSumClosest</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        Arrays.sort(nums);  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">2</span>;i++)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> l=i+<span class=\"number\">1</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> target-nums[i];  </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(l&lt;r)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(min&gt;Math.abs(nums[l]+nums[r]-tmp))&#123;  </span><br><span class=\"line\">                    sum = nums[i]+nums[l]+nums[r];  </span><br><span class=\"line\">                    min = Math.abs(nums[l]+nums[r]-tmp);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[l]+nums[r]&lt;tmp)&#123;l++;&#125;  </span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[l]+nums[r]&gt;tmp)&#123;r--;&#125;  </span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;<span class=\"keyword\">return</span> sum;&#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.18-四数之和\">NO.18 四数之和<a title=\"#no.18-四数之和\" href=\"#no.18-四数之和\"></a></h2>\n<p>在nums中找到四个数和等于target，找到所有的四元素，不能重复，返回一个二维List；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">fourSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        Arrays.sort(nums);  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;nums.length-<span class=\"number\">3</span>;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;nums.length-<span class=\"number\">2</span>;j++)&#123;  </span><br><span class=\"line\">                <span class=\"type\">int</span> l=j+<span class=\"number\">1</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">                <span class=\"keyword\">while</span>(l&lt;r)&#123;  </span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> nums[i]+nums[j]+nums[l]+nums[r];  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(tmp==target)&#123;  </span><br><span class=\"line\">                        List&lt;Integer&gt; L = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">                        L.addAll(Arrays.asList(nums[i],nums[j],nums[l++],nums[r--]));  </span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(!result.contains(L))&#123;result.add(L);&#125;  </span><br><span class=\"line\">                    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tmp&lt;target)&#123;l++;&#125;  </span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;r--;&#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"2.-搜索旋转数组问题\">2. 搜索旋转数组问题<a title=\"#2.-搜索旋转数组问题\" href=\"#2.-搜索旋转数组问题\"></a></h1>\n<p>这类问题一般是给定一个排序数组，但是这个数组会在某一点进行旋转，比如数组<code>[1,2,3,4,5,6,7,]</code>在<code>3</code>这一点进行旋转得到<code>[4,5,6,7,1,2,3]</code>,要求在旋转后的数组内进行搜索，判断一个数target是否存在，一般这类问题会要求时间复杂度为O(logn)，一开始做的时候是先找到旋转点，然后再二分查找，但是想想才发现这和顺序查找有什么区别？这种问题首先会考虑使用二分法进行查找；</p>\n<h2 id=\"no.33-搜索旋转排序数组\">NO.33 搜索旋转排序数组<a title=\"#no.33-搜索旋转排序数组\" href=\"#no.33-搜索旋转排序数组\"></a></h2>\n<p>给定一个不包含重复元素的旋转数组nums和目标值target，判断nums中是否包含target，包含则返回索引，否则返回-1；<br>\n既然是旋转过的排序数组那就是无序了，那就不能套用一般的二分法，但是还是局部有序的，因此可以对二分策略进行讨论：<br>\n对于原数组为<code>[1,2,3,4,5,6,7]</code>，有两种旋转情况：<br>\n情况1：<code>[5,6,7,1,2,3,4]</code>;<br>\n情况2：<code>[4,5,6,7,1,2,3]</code>;<br>\n按照二分法的策略，设置左右指针分别指向头尾，即nums[l]和nums[r]，mid指针指向中间nums[(l+r)/2]；<br>\n对于情况1，nums[l]&gt;nums[mis]，mid的右边有序，因此右边最大值为nums[r]，最小值为nums[l]；对于情况2，nums[l]&lt;nums[mid]，mid的左边有序，因此左边最大值为nums[mid]，最小值为nums[l]；<br>\n（用nums[mid]和nums[r]进行比较也一样，其实就是如果nums[j]&gt;nums[i]，则从i到j是递增的）<br>\n根据mid一侧的最大最小值就可以判断target是否在这边，否则就在另一边，由此更新mid的值，从而达到二分法的效果；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l+r)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]==target) <span class=\"keyword\">return</span> mid;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[l]&gt;nums[mid])&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[mid]&lt;target &amp;&amp; nums[r]&gt;=target)&#123;  </span><br><span class=\"line\">                    l = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;r = mid-<span class=\"number\">1</span>;&#125;  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[l]&lt;=target &amp;&amp; nums[mid]&gt;target)&#123;  </span><br><span class=\"line\">                    r = mid-<span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;l = mid+<span class=\"number\">1</span>;&#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.81-搜索旋转排序数组ii\">NO.81 搜索旋转排序数组II<a title=\"#no.81-搜索旋转排序数组ii\" href=\"#no.81-搜索旋转排序数组ii\"></a></h2>\n<p>这题与上一题的区别在于nums中可能存在重复的值，因此基于上一题的分析需要多考虑一种情况，也就是nums[l]==nums[mid]的情况，对于数组<code>[0,1,1,1,1]</code>，假设其旋转的情况如下：<br>\n情况3：<code>[1,0,1,1,1]</code>；<br>\n此时，nums[l]==nums[mid]，无法判断mid的左边还是右边有序，对于这种情况只要l++就行，因为此时mid右边的值都与nums[mid]相等，而mid左边可能存在不等的值；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l+r)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]==target) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[l]==nums[mid])&#123;  <span class=\"comment\">//对于这种情况，令r--没用，这也是为什么后面将nums[l]和nums[mid]进行比较  </span></span><br><span class=\"line\">                l++;  </span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[l]&lt;nums[mid])&#123;  <span class=\"comment\">//mid的左边有序  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[l]&lt;=target &amp;&amp; target&lt;nums[mid])&#123;  <span class=\"comment\">//有序所以可以判断target是否在左边  </span></span><br><span class=\"line\">                    r = mid-<span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;l=mid+<span class=\"number\">1</span>;&#125;  <span class=\"comment\">//否则在右边  </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[l]&gt;nums[mid])&#123;  <span class=\"comment\">//mid的右边有序  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[mid]&lt;target &amp;&amp; nums[r]&gt;=target)&#123;  <span class=\"comment\">//同上，可以判断target是否在右边  </span></span><br><span class=\"line\">                    l = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;r=mid-<span class=\"number\">1</span>;&#125;  <span class=\"comment\">//否则在左边  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.153-寻找旋转排序数组中的最小值\">NO.153 寻找旋转排序数组中的最小值<a title=\"#no.153-寻找旋转排序数组中的最小值\" href=\"#no.153-寻找旋转排序数组中的最小值\"></a></h2>\n<p>这道题有点不一样：在旋转数组中找出最小值，当然可以用O(n)的方法来做，但是这明显不是题目的本意，要利用旋转数组局部有序的性质，因此还是用二分法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMin</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];   </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums.length==<span class=\"number\">2</span>) <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>]&lt;nums[<span class=\"number\">1</span>]?nums[<span class=\"number\">0</span>]:nums[<span class=\"number\">1</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l+r)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[l]&lt;nums[r]) <span class=\"keyword\">return</span> nums[l];  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&lt;nums[mid-<span class=\"number\">1</span>]) <span class=\"keyword\">return</span> nums[mid];  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid]&lt;nums[l]) r = mid;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = mid+<span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>以上的解法也是基于二分法，但是感觉有点繁琐，因此有一个改进的更巧妙的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMin</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l+r)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]&gt;nums[r])&#123;l = mid+<span class=\"number\">1</span>;&#125;  <span class=\"comment\">//如果mid左边不是有序，则左边包含最小值,且nums[mid]不是最小值  </span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;r = mid;&#125;  <span class=\"comment\">//否则最小值在右边，nums[mid]可能是最小值  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[l];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这里的二分策略与一般的二分法的区别仅在于<code>l&lt;r</code>和<code>r=mid</code>，因为每次要找到包含最小值的一边，如果nums[mid]&lt;nums[r]，说明右边有序且不包含最小值，并且nums[mid]可能是最小值，因此令r=mid；如果nums[mid]&gt;nums[r]，说明最小值就在右边，且nums[mid]一定不是最小值，因此令l=mid+1；</p>\n<h2 id=\"no.154-寻找旋转排序数组中的最小值ii\">NO.154 寻找旋转排序数组中的最小值II<a title=\"#no.154-寻找旋转排序数组中的最小值ii\" href=\"#no.154-寻找旋转排序数组中的最小值ii\"></a></h2>\n<p>这道题与上一题的唯一区别就是包含重复值，因此在上一题的基础上多考虑一种情况，也就是nums[mid]==nums[r]，此时根据l和r的位置无法判断最小值是在哪一边，因此，如果l右边数不变可以令l++，如果r左边的数不变可以令r–（其实也可以直接令r–，参考NO.81）；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMin</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>, r=nums.length-<span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (l+r)/<span class=\"number\">2</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[mid]==nums[r])&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[r]==nums[r-<span class=\"number\">1</span>])&#123;r--;&#125;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[l]==nums[l+<span class=\"number\">1</span>])&#123;l++;&#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid]&gt;nums[r])&#123;l=mid+<span class=\"number\">1</span>;&#125;  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;r=mid;&#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[l];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"3.-丑数问题\">3. 丑数问题<a title=\"#3.-丑数问题\" href=\"#3.-丑数问题\"></a></h1>\n<p>丑数的定义是只包含质因数2，3，5的正整数；</p>\n<h2 id=\"no.263-丑数\">NO.263 丑数<a title=\"#no.263-丑数\" href=\"#no.263-丑数\"></a></h2>\n<p>判断一个给定的数是否为丑数；<br>\n这是一道简单题，但是如果暴力求解还是不好计算的，需要找出其每个因数并判断是否为质数，其实只需要“除掉”这个数中的2，3，5即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isUgly</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num&lt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(num%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            num /= <span class=\"number\">2</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(num%<span class=\"number\">3</span>==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            num /= <span class=\"number\">3</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(num%<span class=\"number\">5</span>==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            num /= <span class=\"number\">5</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> num==<span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.264-丑数ii\">NO.264 丑数II<a title=\"#no.264-丑数ii\" href=\"#no.264-丑数ii\"></a></h2>\n<p>丑数是因数里只包含2，3，5的正整数，认为1也是丑数，求第n个丑数；<br>\n第一眼看到就觉得这是一个一般的动态规划问题，dp[i]可以由dp[i/2],dp[i/3],dp[i/5]求得（如果可以整除），但是如果用数组，事先又不知道数组长度，因为有非丑数，如果用ArrayList或HashSet又会超时，难办。。。<br>\n有一个很妙但是又感觉很普通（为什么自己没有想到）的方法：三指针，使用三个指针，每次取三个指针分别乘以2，3，5中的最小结果，即是下一个丑数，然后将取得最小结果的指针后移一位，感觉像是上面的想法倒过来实现，只是每次要保证得到的是最小的丑数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">nthUglyNumber</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// if(n==1) return 1;  </span></span><br><span class=\"line\">        <span class=\"comment\">// int count = 1, i = 2;  </span></span><br><span class=\"line\">        <span class=\"comment\">// int[] factor = &#123;2,3,5&#125;;  </span></span><br><span class=\"line\">        <span class=\"comment\">// List&lt;Integer&gt; l = new ArrayList&lt;&gt;();  </span></span><br><span class=\"line\">        <span class=\"comment\">// l.add(1);  </span></span><br><span class=\"line\">        <span class=\"comment\">// l.add(1);  </span></span><br><span class=\"line\">        <span class=\"comment\">// while(count&lt;n)&#123;  </span></span><br><span class=\"line\">        <span class=\"comment\">//     l.add(0);  </span></span><br><span class=\"line\">        <span class=\"comment\">//     for(int num: factor)&#123;  </span></span><br><span class=\"line\">        <span class=\"comment\">//         if(i&gt;=num &amp;&amp; i%num==0 &amp;&amp; l.get(i/num)==1)&#123;  </span></span><br><span class=\"line\">        <span class=\"comment\">//             l.set(l.size()-1,1);  </span></span><br><span class=\"line\">        <span class=\"comment\">//             count++;  </span></span><br><span class=\"line\">        <span class=\"comment\">//             break;  </span></span><br><span class=\"line\">        <span class=\"comment\">//         &#125;  </span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;  </span></span><br><span class=\"line\">        <span class=\"comment\">//     i++;  </span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;  </span></span><br><span class=\"line\">        <span class=\"comment\">// return l.size()-1;  </span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"type\">int</span> a=<span class=\"number\">0</span>, b=<span class=\"number\">0</span>, c=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];  </span><br><span class=\"line\">        arr[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">ugly</span> <span class=\"operator\">=</span> Math.min(arr[a]*<span class=\"number\">2</span>,Math.min(arr[b]*<span class=\"number\">3</span>,arr[c]*<span class=\"number\">5</span>));  </span><br><span class=\"line\">            arr[i] = ugly;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]==arr[a]*<span class=\"number\">2</span>) a++;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]==arr[b]*<span class=\"number\">3</span>) b++;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i]==arr[c]*<span class=\"number\">5</span>) c++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[n-<span class=\"number\">1</span>];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"4.-字符串问题\">4. 字符串问题<a title=\"#4.-字符串问题\" href=\"#4.-字符串问题\"></a></h1>\n<p>字符串问题本来是一大类问题，和数组一样，但是目前做题遇到的方法不多，就暂时将字符串问题分为一类；</p>\n<h2 id=\"no.3-无重复字符的最长子串\">NO.3 无重复字符的最长子串<a title=\"#no.3-无重复字符的最长子串\" href=\"#no.3-无重复字符的最长子串\"></a></h2>\n<p>给定一个字符串，找出其中不含重复字符的最长子串，就和题目名字一样；最简单的方法就是遍历字符串，每次将遍历过的字符放到一个HashSet里，遍历到新的字符，判断HashSet里有没有重复字符，如果有，找到这个字符在字符串中的位置，并且从这个位置开始新一轮的遍历；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>, count=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;s.length())&#123;  </span><br><span class=\"line\">            Set&lt;Character&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();  </span><br><span class=\"line\">            <span class=\"type\">int</span> j=i;  </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j&lt;s.length() &amp;&amp; !set.contains(s.charAt(j)))&#123;  </span><br><span class=\"line\">                set.add(s.charAt(j++));  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            count = Math.max(count,set.size());  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j==s.length()) <span class=\"keyword\">return</span> count;  <span class=\"comment\">//因为遍历到末尾结束  </span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(s.charAt(i)!=s.charAt(j))&#123;  </span><br><span class=\"line\">                i++;  <span class=\"comment\">//因为遇到重复元素才结束  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            i++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><strong>方法二：滑动窗口</strong><br>\n,双指针分别指向字符串中滑动窗口的前后，每次将后面指针的元素加入到HashSet，如果元素重复，就将前面指针的元素从HashSet里删掉，期间，记录HashSet的最大大小：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>, j=<span class=\"number\">0</span>, ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;s.length() &amp;&amp; j&lt;s.length())&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!set.contains(s.charAt(j)))&#123;  </span><br><span class=\"line\">                set.add(s.charAt(j++));  </span><br><span class=\"line\">                ans = Math.max(ans,set.size());  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                set.remove(s.charAt(i++));  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><strong>方法三：改进的滑动窗口</strong><br>\n,将遍历过的元素及其位置放入HashMap中，也就是方法一的思想，重复元素之间的元素就不用遍历了，利用HashMap直接跳到重复元素的位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>, ans=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;s.length();j++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(s.charAt(j)))&#123;  </span><br><span class=\"line\">                i = Math.max(map.get(s.charAt(j))+<span class=\"number\">1</span>,i);  <span class=\"comment\">//要取i和前面一个重复元素位置的最大值  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            ans = Math.max(ans,j-i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">            map.put(s.charAt(j),j);  <span class=\"comment\">//已存在的key会更新value为最大值  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.5-最长回文子串\">NO.5 最长回文子串<a title=\"#no.5-最长回文子串\" href=\"#no.5-最长回文子串\"></a></h2>\n<p>这道题比较有意思，给定一个字符串，找出其中长度最长的回文子串，回文子串就是反转后与自己相等，但是要在一个长字符串中找到一个回文子串，同时要求长度最大；像这种实际中很常见，但是作为算法题一下又想不出比较简单有效的方法的问题是值得记录一下的；<br>\n<strong>方法一：暴力求解</strong> ；一下子想不出好的方法，那就先用暴力求解试试呗，将每个子串都判断一下是否是回文串，最后。。。当然是超时了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">longestPalindrome</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length()-ans;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;s.length();j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j-i+<span class=\"number\">1</span>&gt;ans &amp;&amp; judge(s.substring(i,j+<span class=\"number\">1</span>)))&#123;  </span><br><span class=\"line\">                    ans = j-i+<span class=\"number\">1</span>;  </span><br><span class=\"line\">                    result = s.substring(i,j+<span class=\"number\">1</span>);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(String s)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(s);  </span><br><span class=\"line\">        sb.reverse();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.equals(sb.toString());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><strong>方法二：动态规划</strong><br>\n；没想到这道题也可以用动态规划，需要一个二维的dp数组（好像可以优化内存），令dp[i,j]表示从下标i到j子串的子串是否是回文串（1/0），对于dp[i,j]的更新就可以表示为：</p>\n<p>dp[i,j]= \\begin{cases} 1 \\ \\ ,if \\ dp[i+1,j-1]==1 \\ and \\ s[i]==s[j] \\\\ 0 \\ <br>\n,otherwise \\\\ \\end{cases}</p>\n<p>对于dp数组，只需要更新对角线以及右上角的部分，记录dp[i,j]==1中j-i+1的最大值的同时也要记录子串的位置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">longestPalindrome</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] ans = &#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[s.length()][s.length()];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;s.length();k++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length()-k;i++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i+<span class=\"number\">1</span>&gt;i+k-<span class=\"number\">1</span> || dp[i+<span class=\"number\">1</span>][i+k-<span class=\"number\">1</span>]==<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                    dp[i][i+k] = s.charAt(i)==s.charAt(i+k)?<span class=\"number\">1</span>:<span class=\"number\">0</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[i][i+k]==<span class=\"number\">1</span> &amp;&amp; k+<span class=\"number\">1</span>&gt;ans[<span class=\"number\">1</span>]-ans[<span class=\"number\">0</span>]+<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                    ans[<span class=\"number\">0</span>] = i;  </span><br><span class=\"line\">                    ans[<span class=\"number\">1</span>] = i+k;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substring(ans[<span class=\"number\">0</span>],ans[<span class=\"number\">1</span>]+<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><strong>方法三：中心扩展法</strong><br>\n；遍历字符串，将遍历到的位置作为回文子串的中心，然后由中心向外扩展，从到找到以当前位置为中心的最长回文子串，但是回文子串的长度会有奇数和偶数两种情况，因此每次扩展的中心也要考虑两种情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">longestPalindrome</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> s;  </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">0</span>, r=<span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span>[] p1 = search(s,i,i);  </span><br><span class=\"line\">            <span class=\"type\">int</span>[] p2 = search(s,i,i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p1[<span class=\"number\">1</span>]-p1[<span class=\"number\">0</span>]-<span class=\"number\">1</span>&gt;r-l-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                l = p1[<span class=\"number\">0</span>];  </span><br><span class=\"line\">                r = p1[<span class=\"number\">1</span>];  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p2[<span class=\"number\">1</span>]-p2[<span class=\"number\">0</span>]-<span class=\"number\">1</span>&gt;r-l-<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                l = p2[<span class=\"number\">0</span>];  </span><br><span class=\"line\">                r = p2[<span class=\"number\">1</span>];  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.substring(l+<span class=\"number\">1</span>,r);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] search(String s, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> &amp;&amp; j&lt;s.length() &amp;&amp; s.charAt(i)==s.charAt(j))&#123;  </span><br><span class=\"line\">            i--;  </span><br><span class=\"line\">            j++;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;i,j&#125;;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.12-整数转罗马数字\">NO.12 整数转罗马数字<a title=\"#no.12-整数转罗马数字\" href=\"#no.12-整数转罗马数字\"></a></h2>\n<p>给定一个整数（大于0小于3999），将其转换为罗马数字表示，在罗马数字中1000,500,100,50,10,5,1分别由”M”,”D”,”C”,”L”,”X”,”V”,”I”表示，特别要注意的是4,9,40,90,400,900有单独的表示”CM”,”CD”,”XC”,”XL”,”IX”,”IV”；<br>\n一开始想到的解法比较复杂，就是对整数的每一位进行判断，如果是4或9，就直接在HashMap中找到，否则判断大于5或是小于5，同时还要根据位数乘上10的倍数；<br>\n可以从最大的数1000，到900…到4，1，如果给出的数num大于这些数，就减去，然后字符串中添加这些数对应的表示，到最后num减为0，得到的字符串就是结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">intToRoman</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] arr = &#123;<span class=\"number\">1000</span>,<span class=\"number\">900</span>,<span class=\"number\">500</span>,<span class=\"number\">400</span>,<span class=\"number\">100</span>,<span class=\"number\">90</span>,<span class=\"number\">50</span>,<span class=\"number\">40</span>,<span class=\"number\">10</span>,<span class=\"number\">9</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>&#125;;  </span><br><span class=\"line\">        String[] S = &#123;<span class=\"string\">&quot;M&quot;</span>,<span class=\"string\">&quot;CM&quot;</span>,<span class=\"string\">&quot;D&quot;</span>,<span class=\"string\">&quot;CD&quot;</span>,<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;XC&quot;</span>,<span class=\"string\">&quot;L&quot;</span>,<span class=\"string\">&quot;XL&quot;</span>,<span class=\"string\">&quot;X&quot;</span>,<span class=\"string\">&quot;IX&quot;</span>,<span class=\"string\">&quot;V&quot;</span>,<span class=\"string\">&quot;IV&quot;</span>,<span class=\"string\">&quot;I&quot;</span>&#125;;  </span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(num&gt;=arr[i])&#123;  </span><br><span class=\"line\">                num -= arr[i];  </span><br><span class=\"line\">                sb.append(S[i]);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.49-字母异位词分组\">NO.49 字母异位词分组<a title=\"#no.49-字母异位词分组\" href=\"#no.49-字母异位词分组\"></a></h2>\n<p>给定一个字符串数组，将字母相同但是顺序不同的字符串分为一组，如：<code>[&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</code>的分组结果为<code>[[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;bat&quot;]]</code>；<br>\n首先肯定要有个方法判断两个字符串是否是异位词，我想到的方法是使用长度26的数组记录每个字母的出现次数，遍历字符串数组，得到字符串的统计数组，然后再遍历二维list，与每个list的第一个字符串的统计数组比较，如果相等，就将字符串放入到这个lsit中，但是这样做太耗时了；<br>\n还有个判断两个字符串是否是异位词的方法：对字符串进行排序；基于这个思想，可以使用一个HashMap，map的value是一个字符串list，存放原字符串数组的元素，而key是value中字符串排序的结果，以上面给出例子为例，可以得到结果：<code>&#123;&quot;aet&quot;=[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],&quot;ant&quot;=[&quot;nat&quot;,&quot;tan&quot;],&quot;abt&quot;=[&quot;bat&quot;]&#125;</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">groupAnagrams</span><span class=\"params\">(String[] strs)</span> &#123;  </span><br><span class=\"line\">        Map&lt;String,List&lt;String&gt;&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s: strs)&#123;  </span><br><span class=\"line\">            <span class=\"type\">char</span>[] arr = s.toCharArray();  </span><br><span class=\"line\">            Arrays.sort(arr);  </span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> String.valueOf(arr);  <span class=\"comment\">//对字符串进行排序  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!map.containsKey(key))&#123;  </span><br><span class=\"line\">                map.put(key,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  <span class=\"comment\">//创建不存在的键值  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            map.get(key).add(s);  <span class=\"comment\">//在key对应的value中添加字符串  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(map.values());  <span class=\"comment\">//将HashMap的值转换为二维List  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>最后将HashMap的value转换为二维list<code>new ArrayList(map.values())</code>要注意一下。</p>\n<h2 id=\"no.394-字符串解码\">NO.394 字符串解码<a title=\"#no.394-字符串解码\" href=\"#no.394-字符串解码\"></a></h2>\n<p>(这道题写的心态崩掉了)给定一个字符串，其中包括字母、数字和中括号，中括号内为字母，数字后接着中括号，如<code>3[a2[c]]</code>，数字表示中括号内的字符串重复的次数，本题的主要问题是要考虑中括号内还可以包括中括号，因此可以使用栈来做，如果不是<code>]</code>就入栈，否则就在栈里找上一个<code>[</code>，并找出其前面的数字，将字符串重复对应次数后再入栈，最后将栈内的字符串连起来就是结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">decodeString</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        Stack&lt;String&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: s.toCharArray())&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c!=<span class=\"string\">&#x27;]&#x27;</span>)&#123;  </span><br><span class=\"line\">                stack.push(c+<span class=\"string\">&quot;&quot;</span>);  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();  </span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();  </span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!stack.peek().equals(<span class=\"string\">&quot;[&quot;</span>))&#123;  </span><br><span class=\"line\">                    sb.insert(<span class=\"number\">0</span>,stack.pop());  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                stack.pop();  </span><br><span class=\"line\">                <span class=\"keyword\">while</span>(!stack.empty() &amp;&amp; !stack.peek().equals(<span class=\"string\">&quot;[&quot;</span>))&#123;  </span><br><span class=\"line\">                    num.insert(<span class=\"number\">0</span>,stack.pop());  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">                stack.push(decode(num.toString(),sb.toString()));  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.empty()) result.insert(<span class=\"number\">0</span>,stack.pop());  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.toString();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">decode</span><span class=\"params\">(String num, String s)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(Character.isLetter(num.charAt(i)))&#123;  </span><br><span class=\"line\">            sb.append(num.charAt(i++));  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;Integer.valueOf(num.substring(i));j++)&#123;  </span><br><span class=\"line\">            sb.append(s);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sb.toString();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.767-重构字符串\">NO.767 重构字符串<a title=\"#no.767-重构字符串\" href=\"#no.767-重构字符串\"></a></h2>\n<p>给定一个字符串S，对其每个元素进行重新排列，要求重排结果中没有相邻两个字符相同，如果不存在返回空串；<br>\n可以用一个字符数组来存储重排后的结果，对于这个字符数组可以是先填满数组的偶数(或奇数)位置，再填奇数(偶数)位置，并且最关键的是:<br>\n要保证出现最多的字符应该填写在奇数位置！！！<br>\n如果用hashmap或数组记录每个字符出现的次数，要先找出出现最多的字符，先将该字符填在数组里，再去考虑其它字符，比较麻烦；<br>\n有一个技巧就是，还是使用数组记录次数，但是记录完之后对数组进行排序，就可以知道出现最多的字符，但是问题是排序之后丢失了下标顺序，而字符值就是通过下标确定的，有一个很巧的方法就是将字符出现次数和下标的值存储在数组值地不同位上，如:’c’出现3次，则C[‘c’-‘a’]<br>\n= 3*100 + ‘c’; 这样可以使次数和字符值互不影响地存储；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">reorganizeString</span><span class=\"params\">(String S)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;record.length;i++)&#123;  </span><br><span class=\"line\">            record[i] = i;  <span class=\"comment\">//存储每个位置对应的字符值  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: S.toCharArray())&#123;  </span><br><span class=\"line\">            record[c-<span class=\"string\">&#x27;a&#x27;</span>] += <span class=\"number\">100</span>;  <span class=\"comment\">//记录每个字符的出现次数*100  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        Arrays.sort(record);  </span><br><span class=\"line\">        <span class=\"comment\">// System.out.println(Arrays.toString(record));  </span></span><br><span class=\"line\">        <span class=\"type\">char</span>[] C = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[S.length()];  <span class=\"comment\">//建立一个字符数组  </span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;  <span class=\"comment\">//先将字符放在偶数位置  </span></span><br><span class=\"line\">        <span class=\"comment\">//出现次数升序排列，保证先将出现次数少的字符先放在偶数位置，然后再放奇数位置  </span></span><br><span class=\"line\">        <span class=\"comment\">//这样可以保证不会有相同字符相邻  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n: record)&#123;   </span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>)(n%<span class=\"number\">100</span>+<span class=\"string\">&#x27;a&#x27;</span>);  <span class=\"comment\">//对应的字符  </span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> n/<span class=\"number\">100</span>;  <span class=\"comment\">//出现的次数  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count&gt;(S.length()+<span class=\"number\">1</span>)/<span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;count;i++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index&gt;=C.length) index = <span class=\"number\">0</span>;  <span class=\"comment\">//偶数位置满了之后开始在奇数位置放  </span></span><br><span class=\"line\">                C[index] = ch;  </span><br><span class=\"line\">                index += <span class=\"number\">2</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(C);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"5.-并查集\">5. 并查集<a title=\"#5.-并查集\" href=\"#5.-并查集\"></a></h1>\n<p>并查集是一种精妙使用的数据结构，主要用于处理一些不相交集合的合并问题，常用于：</p>\n<ul>\n<li>求连通子图</li>\n<li>求最小生成树Kruskal算法</li>\n<li>求最近公共祖先LCA</li>\n</ul>\n<p>并查集的基本操作：</p>\n<ol>\n<li>make建立一个新的并查集；</li>\n<li>merge(x,y)如果x和y所在的集合不相交，则将其进行合并：将一个集合代表节点设置为另一个集合代表节点的父节点；</li>\n<li>find(x)查找节点所在集合的<strong>代表节点</strong> ；</li>\n</ol>\n<p>对于并查集的优化有路径压缩和按秩合并；</p>\n<h2 id=\"no.684-冗余连接\">NO.684 冗余连接<a title=\"#no.684-冗余连接\" href=\"#no.684-冗余连接\"></a></h2>\n<p>给定一个二维数组表示无向图的所有边，且每条边[u,v]满足u&lt; v，图是由一棵树和一条符加的边组成的，因此会存在环路，要求删掉一条边使得图变成一棵树；<br>\n使用并查集，先将每一个节点作为一个集合，自己就是代表节点，每加入一条边，查找边的起点和终点所在的集合的代表节点，如果两个代表节点相同，说明这两个节点已经在同一个集合中了，当前这条边就是重复的，如果两个代表节点不同，将两个集合合并；<br>\nparent[i]记录的是节点i的代表节点，也就是i在树中的父节点，如果要找到节点i所在集合的代表节点，要递归直到i=parent[i]；<br>\n<img src=\"images/Java_leetcode_note/NO684.png\" alt=\"\" loading=\"lazy\"><br>\n最后将[1,5]连接上就是一棵树；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span>[] parent = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1001</span>];  <span class=\"comment\">//parant[a]=b表示a的表示节点是b，和父节点类似  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findRedundantConnection(<span class=\"type\">int</span>[][] edges) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;parent.length;i++) parent[i] = i;  <span class=\"comment\">//parent初始化  </span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] l: edges)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(find(l[<span class=\"number\">0</span>])!=find(l[<span class=\"number\">1</span>]))&#123;  </span><br><span class=\"line\">                merge(l[<span class=\"number\">0</span>],l[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//当前边的两个节点已经在同一个集合中了，此条边就是可以删掉的  </span></span><br><span class=\"line\">                res[<span class=\"number\">0</span>] = l[<span class=\"number\">0</span>];  </span><br><span class=\"line\">                res[<span class=\"number\">1</span>] = l[<span class=\"number\">1</span>];  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span>&#123;  <span class=\"comment\">//查找x所在集合的代表节点  </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(x!=parent[x])&#123;  </span><br><span class=\"line\">            x = parent[x];  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span>&#123;  <span class=\"comment\">//合并x和y所在的集合  </span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> find(x), b = find(y);  </span><br><span class=\"line\">        parent[a] = b;  <span class=\"comment\">//将x集合的代表节点放到y集合代表节点b的下面  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.990-等式方程的可满足性\">NO.990 等式方程的可满足性<a title=\"#no.990-等式方程的可满足性\" href=\"#no.990-等式方程的可满足性\"></a></h2>\n<p>给定一个字符串数组，其中每个字符串类似”a==b”、”a!=b”的判断两个变量是否相等的形式，要求判断所有的判断语句是否合法，当存在”a==b”、”a!=b”时则矛盾不合法；<br>\n可以先根据”==”字符串构建并查集，然后再判断”!=”是否合法，也就是看”!=”两端的变量是否存在于同一个集合中；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span>[] parent = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equationsPossible</span><span class=\"params\">(String[] equations)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;parent.length;i++) parent[i] = i;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s: equations)&#123;  <span class=\"comment\">//先根据==的字符串构造并查集  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>)==<span class=\"string\">&#x27;=&#x27;</span>)&#123;  </span><br><span class=\"line\">                merge(s.charAt(<span class=\"number\">0</span>),s.charAt(<span class=\"number\">3</span>));  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s: equations)&#123;  <span class=\"comment\">//对于!=的字符串，查看两个变量是否在同一个集合中  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(<span class=\"number\">1</span>)==<span class=\"string\">&#x27;!&#x27;</span>)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(find(s.charAt(<span class=\"number\">0</span>))==find(s.charAt(<span class=\"number\">3</span>))) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">merge</span><span class=\"params\">(<span class=\"type\">char</span> x,<span class=\"type\">char</span> y)</span>&#123;  </span><br><span class=\"line\">        parent[find(x)] = find(y);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">find</span><span class=\"params\">(<span class=\"type\">char</span> x)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> x-<span class=\"string\">&#x27;a&#x27;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(n!=parent[n]) n = parent[n];  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"其他问题\">其他问题<a title=\"#其他问题\" href=\"#其他问题\"></a></h1>\n<h2 id=\"no.448-找到所有数组中消失的数字\">NO.448 找到所有数组中消失的数字<a title=\"#no.448-找到所有数组中消失的数字\" href=\"#no.448-找到所有数组中消失的数字\"></a></h2>\n<p>题目非常简单，给定一个数组包含n个数，每个数都是1到n之间，但是里面会有重复的数，因此就有1到n的某几个数没出现，找出这几个没出现的数；<br>\n简单的解法当然也非常简单，建立一个HashSet，令i从1到n循环，如果i不在HashSet里面，就将其添加到List里，最后返回List，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">findDisappearedNumbers</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        List&lt;Integer&gt; L = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        Set&lt;Integer&gt; set = Arrays.stream(nums).boxed().collect(Collectors.toSet());  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=nums.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(! set.contains(i))&#123;  </span><br><span class=\"line\">                L.add(i);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> L;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>但是题目要求不能用额外的空间，并且时间复杂度为O(n)，这里用了额外的HashSet，并且查找也比较耗时；<br>\n题目里有一个很关键的点就是<strong>数组包含n个数</strong><br>\n，想象一下，如果正好是1到n这n个数，如果将其排序，则每个元素值和其位置相同，即使将其顺序打乱，这n个元素之间也能够相互对应；<br>\n看一个例子：[4,3,2,7,8,2,3,1]，数组有8个数，不包含5,6，且2,3重复，一个从1到n的数组为：</p>\n<p>[1,2,3,4,5,6,7,8]</p>\n<p>每个数组元素值与元素位置是一样的，因此nums[i]对应的元素就是i，而对于此问题的例子，将其排序后：</p>\n<p>[1,2,2,3,3,4,7,8]</p>\n<p>如果将nums[i]对应的位置的元素乘上-1（保证为负），那么最后的结果就是：</p>\n<p>[-1,-2,-2,-3,3,4,-7,-8]</p>\n<p>其中第5,6个元素任为正，说明数组中没有元素值为5,6的元素对应到这个位置，因此没有乘上-1；<br>\n如果这样想：将第5,6个元素换为2,3，得到的数组就为：</p>\n<p>[1,2,3,4,2,3,7,8]</p>\n<p>这样就可以更直观地看出为什么不包含5,6的数组映射结果中只有第5,6个元素的值大于0，之所以能够这样做，最主要的还是数组里的元素个数为n；<br>\n求解的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">findDisappearedNumbers</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i: nums)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[Math.abs(i)-<span class=\"number\">1</span>]&gt;<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                nums[Math.abs(i)-<span class=\"number\">1</span>] *= -<span class=\"number\">1</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        List&lt;Integer&gt; L = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;nums.length;j++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[j]&gt;<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                L.add(j+<span class=\"number\">1</span>);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> L;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.1160-拼写单词\">NO.1160 拼写单词<a title=\"#no.1160-拼写单词\" href=\"#no.1160-拼写单词\"></a></h2>\n<p>有一段时间没有写做题的笔记了，因为简单题已经用python做过一遍，该写的笔记也写过了，所以一般只在遇到比较典型的问题或是想法比较好的问题就写一下。这道题是给定一个字母表chars和一个字符串数组，如果数组里的字符串单词可以用字母表里的字母表示出来，就认为这个单词已经掌握了，求掌握的所有单词的长度之和。<br>\n之前也做过这种有关“单词”的题目，都是需要判断一个字符串是否包含另一个字符串，刚开始做的时候是傻傻的去遍历比较，但是题目又要求每个字母只能用一次，如果有多个重复字母，又麻烦一点。对于这类问题，可以将一个字符串中每个字母的频数记录在一个长度为26的数组中，数组每一位对应一个字母，只要将字母转换为ASCII码，就可以与数组索引对应。如”zhangqingfeng”对应的频数数组为<code>[1, 0, 0, 0, 1, 1, 3, 1, 1, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]</code>，按照这种思路求解的代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countCharacters</span><span class=\"params\">(String[] words, String chars)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] count = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;chars.length();i++) count[chars.charAt(i)-<span class=\"number\">97</span>]++;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s:words)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;s.length();j++) tmp[s.charAt(j)-<span class=\"number\">97</span>]++;  </span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">sign</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;tmp.length;k++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp[k]&gt;count[k]) sign = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sign) length += s.length();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> length;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n","prev":{"title":"记录我的第一个Java项目","link":"2020/02/12/blog/Java_Project"},"next":{"title":"Java算法笔记","link":"2019/11/05/blog/Java_leetcode_algorithm"},"plink":"https://qfzack.github.io/2019/12/12/blog/Java_leetcode_note/","toc":[{"id":"1.-多数和问题","title":"1. 多数和问题","index":"1","children":[{"id":"no.15-三数之和","title":"NO.15 三数之和","index":"1.1"},{"id":"no.16-最接近的三数之和","title":"NO.16 最接近的三数之和","index":"1.2"},{"id":"no.18-四数之和","title":"NO.18 四数之和","index":"1.3"}]},{"id":"2.-搜索旋转数组问题","title":"2. 搜索旋转数组问题","index":"2","children":[{"id":"no.33-搜索旋转排序数组","title":"NO.33 搜索旋转排序数组","index":"2.1"},{"id":"no.81-搜索旋转排序数组ii","title":"NO.81 搜索旋转排序数组II","index":"2.2"},{"id":"no.153-寻找旋转排序数组中的最小值","title":"NO.153 寻找旋转排序数组中的最小值","index":"2.3"},{"id":"no.154-寻找旋转排序数组中的最小值ii","title":"NO.154 寻找旋转排序数组中的最小值II","index":"2.4"}]},{"id":"3.-丑数问题","title":"3. 丑数问题","index":"3","children":[{"id":"no.263-丑数","title":"NO.263 丑数","index":"3.1"},{"id":"no.264-丑数ii","title":"NO.264 丑数II","index":"3.2"}]},{"id":"4.-字符串问题","title":"4. 字符串问题","index":"4","children":[{"id":"no.3-无重复字符的最长子串","title":"NO.3 无重复字符的最长子串","index":"4.1"},{"id":"no.5-最长回文子串","title":"NO.5 最长回文子串","index":"4.2"},{"id":"no.12-整数转罗马数字","title":"NO.12 整数转罗马数字","index":"4.3"},{"id":"no.49-字母异位词分组","title":"NO.49 字母异位词分组","index":"4.4"},{"id":"no.394-字符串解码","title":"NO.394 字符串解码","index":"4.5"},{"id":"no.767-重构字符串","title":"NO.767 重构字符串","index":"4.6"}]},{"id":"5.-并查集","title":"5. 并查集","index":"5","children":[{"id":"no.684-冗余连接","title":"NO.684 冗余连接","index":"5.1"},{"id":"no.990-等式方程的可满足性","title":"NO.990 等式方程的可满足性","index":"5.2"}]},{"id":"其他问题","title":"其他问题","index":"6","children":[{"id":"no.448-找到所有数组中消失的数字","title":"NO.448 找到所有数组中消失的数字","index":"6.1"},{"id":"no.1160-拼写单词","title":"NO.1160 拼写单词","index":"6.2"}]}],"reading_time":"7637 words in 51 min"}