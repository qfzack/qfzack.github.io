{"title":"Java-BFS与DFS","date":"2020-03-09T05:00:00.000Z","date_formatted":{"ll":"Mar 9, 2020","L":"03/09/2020","MM-DD":"03-09"},"author":"Qingfeng Zhang","link":"2020/03/08/blog/Java_DFS_Backtrack","categories":["Algorithm"],"updated":"2025-04-13T11:18:17.098Z","content":"<p>一直感觉DFS和回溯法没什么区别，其实它们意思很相近，回溯法是把问题分步解决，在每一步都尝试所有的可能，当找到结果或是当前方式不对时，就退回到上一步，这个过程一般会递归实现。当把回溯法用于树时，就是深度优先搜索(DFS)，几乎同义。<br>\n不管是用Java还是Python，回溯算法的基本解题思想还是一样的：<strong>可以把问题的解转化成图或树的结构表示，然后用深度优先遍历进行搜索，期间会进行剪枝处理以减少时间消耗</strong><br>\n，就是语法方面会有一点不同。一般会定义一个函数用于递归，递归有两种选择：选择当前的数或是不选，前一种是往深度方向探索，后一种是回溯到当前节点的下一个节点（就是图的深度优先遍历啊，在纸上画一画就明白了）。</p>\n<h1 id=\"1.组合总数问题\">1.组合总数问题<a title=\"#1.组合总数问题\" href=\"#1.组合总数问题\"></a></h1>\n<h2 id=\"no.39-组合总数\">NO.39 组合总数<a title=\"#no.39-组合总数\" href=\"#no.39-组合总数\"></a></h2>\n<p>题目给定一个数组nums和一个目标值target，找出nums中和为target的所有组合，每个组合长度无限制，但不能重复，这个题目一看就是要用回溯法来做，在一棵树上从根节点开始生长，如果存在一个节点，从根节点到该节点的路径和为target，则该条路径就是一个组合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        Arrays.sort(candidates);  </span><br><span class=\"line\">        backtrack(candidates,result,target,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates,List&lt;List&lt;Integer&gt;&gt; result,<span class=\"type\">int</span> target,<span class=\"type\">int</span> i,<span class=\"type\">int</span> sum,List&lt;Integer&gt; L)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;candidates.length-<span class=\"number\">1</span> || sum&gt;target)&#123;<span class=\"keyword\">return</span> ;&#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum==target)&#123;  </span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(L));  <span class=\"comment\">//一定要add(new ArrayList&lt;&gt;(L))，不能是add(L)  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 两种回溯的写法：  </span></span><br><span class=\"line\">        <span class=\"comment\">// 写法一：  </span></span><br><span class=\"line\">        <span class=\"comment\">// for(int start=i;start&lt;candidates.length;start++)&#123;  </span></span><br><span class=\"line\">        <span class=\"comment\">//     if(sum&gt;target) break;  </span></span><br><span class=\"line\">        <span class=\"comment\">//     L.add(candidates[start]);  </span></span><br><span class=\"line\">        <span class=\"comment\">//     backtrack(candidates,result,target,start,sum+candidates[start],L);  </span></span><br><span class=\"line\">        <span class=\"comment\">//     L.remove(L.size()-1);  </span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 写法二：更慢一点  </span></span><br><span class=\"line\">        backtrack(candidates,result,target,i+<span class=\"number\">1</span>,sum,L);  </span><br><span class=\"line\">        L.add(candidates[i]);  </span><br><span class=\"line\">        backtrack(candidates,result,target,i,sum+candidates[i],L);  </span><br><span class=\"line\">        L.remove(L.size()-<span class=\"number\">1</span>);  <span class=\"comment\">//前面添加的值要在后面删掉，Python直接在参数里添加  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>上面的代码中将combinationSum()函数的result变量作为参数传给无返回值的函数backtrack()，经backtrack修改，然后在combinationSum()中<code>return result</code>，这里backtrack()里对result添加子列表为什么是<code>result.add(new ArrayList&lt;&gt;(L))</code>，而不能是<code>result.add(L)</code>，Java基础不行的就不懂了吧，说的就是我自己。。。</p>\n<h2 id=\"no.40-组合总数ii\">NO.40 组合总数II<a title=\"#no.40-组合总数ii\" href=\"#no.40-组合总数ii\"></a></h2>\n<p>和NO.39非常像，只是这里要求元素不能重复使用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum2</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        Arrays.sort(candidates);  </span><br><span class=\"line\">        backtrack(candidates,result,target,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(),<span class=\"number\">0</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">int</span>[] candidates,List&lt;List&lt;Integer&gt;&gt; result,<span class=\"type\">int</span> target,<span class=\"type\">int</span> i,List&lt;Integer&gt; L,<span class=\"type\">int</span> sum)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum==target)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!result.contains(L))&#123;result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(L));&#125;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;candidates.length-<span class=\"number\">1</span> || sum&gt;target)&#123;<span class=\"keyword\">return</span> ;&#125;  <span class=\"comment\">//放后面避免i&gt;candidates.length-1时sum==target，因为递归传入的是i+1  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 写法一：  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> start=i;start&lt;candidates.length;start++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(candidates[start]&gt;target) <span class=\"keyword\">break</span>;  <span class=\"comment\">//提前剪枝  </span></span><br><span class=\"line\">            L.add(candidates[start]);  </span><br><span class=\"line\">            backtrack(candidates,result,target,start+<span class=\"number\">1</span>,L,sum+candidates[start]);  <span class=\"comment\">//这里的start+1是与上一题的区别  </span></span><br><span class=\"line\">            L.remove(L.size()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// 写法二：  </span></span><br><span class=\"line\">        <span class=\"comment\">// backtrack(candidates,result,target,i+1,L,sum);  </span></span><br><span class=\"line\">        <span class=\"comment\">// L.add(candidates[i]);  </span></span><br><span class=\"line\">        <span class=\"comment\">// backtrack(candidates,result,target,i+1,L,sum+candidates[i]);  </span></span><br><span class=\"line\">        <span class=\"comment\">// L.remove(L.size()-1);  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.216-组合总数iii\">NO.216 组合总数III<a title=\"#no.216-组合总数iii\" href=\"#no.216-组合总数iii\"></a></h2>\n<p>要求在1~9内找不重复的k个数和为n，返回所有结果的列表，还是一个普通的回溯问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">combinationSum3</span><span class=\"params\">(<span class=\"type\">int</span> k, <span class=\"type\">int</span> n)</span> &#123;  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        backtrack(result,k,n,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(List&lt;List&lt;Integer&gt;&gt; result,<span class=\"type\">int</span> k,<span class=\"type\">int</span> n, <span class=\"type\">int</span> i, <span class=\"type\">int</span> sum, List&lt;Integer&gt; l)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l.size()&gt;k)&#123;<span class=\"keyword\">return</span> ;&#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum==n &amp;&amp; l.size()==k)&#123;  </span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(l));  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> start=i;start&lt;<span class=\"number\">10</span>;start++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum+start&gt;n)&#123;<span class=\"keyword\">continue</span>;&#125;  </span><br><span class=\"line\">            l.add(start);  </span><br><span class=\"line\">            backtrack(result,k,n,start+<span class=\"number\">1</span>,sum+start,l);  </span><br><span class=\"line\">            l.remove(l.size()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.377-组合总数iv\">NO.377 组合总数IV<a title=\"#no.377-组合总数iv\" href=\"#no.377-组合总数iv\"></a></h2>\n<p>给定一个数组nums和一个目标数target，找出nums中和为target的组合的总数，nums中的数可以重复使用，且顺序不同为不同的组合，如[1,1,2]和[1,2,1];<br>\n正好借这道题来记录一下<strong>关于DFS，记忆化搜索，动态规划</strong> 的东西；<br>\n首先拿到这道题依旧是没有好的思路，所以依然是用DFS来试试：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        dfs(nums,target,<span class=\"number\">0</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,<span class=\"type\">int</span> res,<span class=\"type\">int</span> i)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            count++;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;nums.length;k++)&#123;  </span><br><span class=\"line\">            dfs(nums,res-nums[k],<span class=\"number\">0</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>思路没有问题，但是搜索会超时，如对于nums=[1,2,3],target=35，存在35个1的组合；<br>\n虽然思路没有问题，但是上面的代码写的也不好，只是套用一下DFS的框架，可以改一下代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(target==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num: nums)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(target&gt;=num)&#123;  </span><br><span class=\"line\">                count += combinationSum4(nums,target-num);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>依然有DFS的思想，但是代码简洁清晰；<strong>最基本的思想就是target的组合总数等于target-num（num是nums中任一数）的组合总数之和</strong><br>\n，这是本题的解题思路；<br>\n虽然上面改了一下代码，但是和一开始没多大区别，依然超时，其实仔细想想就会发现，如果我要求target的组合总数，需要知道target-<br>\nnum的组合总数，而要想知道target-num的组合总数，就又要求target-num-num的组合总数。。。这就是上面的暴力递归；<br>\n但是在我求target的组合总数时候，之前可能就已经把target-<br>\nnum的结果求出来过，那我可不可以把这些结果记录下来，在求target组合总数的时候直接使用这些结果，这就是<strong>记忆化搜索的思想</strong><br>\n,这里可以使用一个数组record，record[i]保存计算出的i的组合总数，这样可以省去很多重复计算：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[target+<span class=\"number\">1</span>];  </span><br><span class=\"line\">        Arrays.fill(record,-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        record[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(nums,target,record);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,<span class=\"type\">int</span> res,<span class=\"type\">int</span>[] record)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(record[res]!=-<span class=\"number\">1</span>) <span class=\"keyword\">return</span> record[res];  <span class=\"comment\">//res的结果之前已经计算出，直接返回  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num: nums)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res&gt;=num)&#123;  </span><br><span class=\"line\">                count += dfs(nums,res-num,record);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        record[res] = count;  <span class=\"comment\">//第一次需要记录和返回，下次再遇到res可以直接得到结果  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>记忆化搜索中的把前面计算的结果保存下来便于之后计算的使用是不是很耳熟，这就是动态规划的思想，动态规划就是把结果保存在dp数组中，因此这题也可以用动态规划来做：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">combinationSum4</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[target+<span class=\"number\">1</span>];  </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;dp.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num: nums)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(i&gt;=num) dp[i] += dp[i-num];  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[target];  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>综上，对于此问题，暴力DFS或递归一般不是好的解法，可以在搜索过程中加入记忆化搜索，如果能直接用动态规划做出来就最好了。</p>\n<h1 id=\"2.图的拓扑排序\">2.图的拓扑排序<a title=\"#2.图的拓扑排序\" href=\"#2.图的拓扑排序\"></a></h1>\n<p>简单来说，图的拓扑排序就是在一个有向图中，对所有的节点进行排序，要求排列的顺序满足有向图中的指向，拓扑排序的结果一般不止一种；</p>\n<h2 id=\"no.210-课程表ii\">NO.210 课程表II<a title=\"#no.210-课程表ii\" href=\"#no.210-课程表ii\"></a></h2>\n<p>有n门课0~n-1需要学习，有的课程在学习之前会有先修课程，如：学完课程a之后才能学习课程b，表示为[b,a]，课程课程总数numCourses和一些先修课程的要求prerequisites，返回任意一种符合要求的课程学习顺序；<br>\n课程之间的先修关系可以看成是一个有向图，只需要求这个图的一个拓扑排序结果就行，可以使用BFS，但是有的课程可能是独立存在的，因此，图可能不会保证所有节点都相连，对于这种情况，先将所有入度为0的节点入队，对于每一个出队的节点，记录该节点并且遍历该节点的下一个节点列表，对下一个节点的入度减1，当节点的入度为0将该节点入队；<br>\n使用BFS构造拓扑排序的过程一般为：<br>\n1.初始化图中节点的入度数组和邻接表；<br>\n2.将入度为0的节点入队；<br>\n3.对队列进行BFS遍历；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findOrder(<span class=\"type\">int</span> numCourses, <span class=\"type\">int</span>[][] prerequisites) &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//NO.207的升级版，可以看作一个有向图，但是会有一些节点单独存在，不与图相连  </span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] degree = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numCourses];  <span class=\"comment\">//节点的入度数组  </span></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; graph = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  <span class=\"comment\">//节点的邻接表  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;numCourses;i++) graph.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  </span><br><span class=\"line\">        <span class=\"comment\">//入度数组和邻接表的初始化  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] l: prerequisites)&#123;  </span><br><span class=\"line\">            degree[l[<span class=\"number\">0</span>]]++;  <span class=\"comment\">//l[1] --&gt; l[0]  </span></span><br><span class=\"line\">            graph.get(l[<span class=\"number\">1</span>]).add(l[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        Queue&lt;Integer&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"comment\">//将所有入度为0的节点入队  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;numCourses;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(degree[i]==<span class=\"number\">0</span>) q.offer(i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numCourses];  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.isEmpty())&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> q.poll();  </span><br><span class=\"line\">            res[p++] = tmp;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n: graph.get(tmp))&#123;  <span class=\"comment\">//出队节点的下一个节点入度减1  </span></span><br><span class=\"line\">                degree[n]--;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(degree[n]==<span class=\"number\">0</span>) q.offer(n);  <span class=\"comment\">//入度为0的节点入队  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p!=numCourses) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"3.八皇后等问题\">3.八皇后等问题<a title=\"#3.八皇后等问题\" href=\"#3.八皇后等问题\"></a></h1>\n<p>八皇后问题是一个标准的回溯求解的问题，每次在棋盘上放置一个皇后时需要考虑棋盘中其它皇后的位置，如果当前没有位置可以放置，则退回到上一步重新放置……与此类似的还有数独问题；</p>\n<h2 id=\"no.37-解数独\">NO.37 解数独<a title=\"#no.37-解数独\" href=\"#no.37-解数独\"></a></h2>\n<p>数独游戏是在一个9 _9的矩阵中，要求每个数都在1~9中，且每一行、每一列、每个3 <em>3的方块(一共9个方块)中没有重复的数字，求一个数独游戏的解；<br>\n可以使用通过维持三个boolean数组来判断当前位置可以放置的数字，row[i][j]表示第i行中数字j+1已经放过了，col[i][j]表示第i列中数字j+1已经放过了，block[i][j]表示第i个块中数字j+1已经放过了；<br>\n<em>_关于本题的总结：</em></em></p>\n<ul>\n<li>1.如果将数组中的位置按照从左到右从上到下编号n=0~80，对于每一个编号可以得到其坐标[n/9,n%9];</li>\n<li>2.同样的方式通过坐标[i,j]计算数组的分块1~9: i/3*3+j/3;</li>\n<li>3.可以用row[i,j]=true表示第i行中j已经出现过，同理可以使用数组col、block表示每列和每个块，当想要在board[i][j]上填写数字时，三个数组中对应行列块都为false的数才能填写;</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solveSudoku</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] row = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">9</span>][<span class=\"number\">9</span>];  </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] col = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">9</span>][<span class=\"number\">9</span>];  </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] block = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">9</span>][<span class=\"number\">9</span>];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">9</span>;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">9</span>;j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Character.isDigit(board[i][j]))&#123;  </span><br><span class=\"line\">                    row[i][board[i][j]-<span class=\"string\">&#x27;1&#x27;</span>] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    col[j][board[i][j]-<span class=\"string\">&#x27;1&#x27;</span>] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    block[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+j/<span class=\"number\">3</span>][board[i][j]-<span class=\"string\">&#x27;1&#x27;</span>] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        dfs(board,row,col,block,<span class=\"number\">0</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] board,<span class=\"type\">boolean</span>[][] row,<span class=\"type\">boolean</span>[][] col,<span class=\"type\">boolean</span>[][] block,<span class=\"type\">int</span> n)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n==<span class=\"number\">81</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> n/<span class=\"number\">9</span>, j = n%<span class=\"number\">9</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(board[i][j]!=<span class=\"string\">&#x27;.&#x27;</span>) <span class=\"keyword\">return</span> dfs(board,row,col,block,n+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">9</span>;k++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(row[i][k] || col[j][k] || block[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+j/<span class=\"number\">3</span>][k]) <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">            board[i][j] = (<span class=\"type\">char</span>)(k+<span class=\"string\">&#x27;1&#x27;</span>);  </span><br><span class=\"line\">            row[i][k] = col[j][k] = block[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+j/<span class=\"number\">3</span>][k] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dfs(board,row,col,block,n+<span class=\"number\">1</span>)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            row[i][k] = col[j][k] = block[i/<span class=\"number\">3</span>*<span class=\"number\">3</span>+j/<span class=\"number\">3</span>][k] = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        board[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.51-n皇后\">NO.51 N皇后<a title=\"#no.51-n皇后\" href=\"#no.51-n皇后\"></a></h2>\n<p>在一个N*N的棋盘上放置皇后，要求每行、每列、以该位置为中心的对角线上都只有一个皇后，求所有可能的放置结果；<br>\n乍看本题和解数独有点相似，但是解数独需要找数组中所有的空位置进行填写，所有位置的计算很巧妙，但N皇后每行每列都只有一个皇后，因此可以从第一行开始放置，则每一行都有N个位置可以放置(其中有些位置不合法)，这就是选择列表：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    List&lt;List&lt;String&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">solveNQueens</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;  </span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] col = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n];  </span><br><span class=\"line\">        <span class=\"type\">char</span>[][] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[n][n];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) Arrays.fill(arr[i],<span class=\"string\">&#x27;.&#x27;</span>);  </span><br><span class=\"line\">        backtrack(arr,col,n,<span class=\"number\">0</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//col[i]表示第i列已经有一个Q了，r表示第r行  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">char</span>[][] arr,<span class=\"type\">boolean</span>[] col,<span class=\"type\">int</span> n,<span class=\"type\">int</span> r)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r&gt;=n)&#123;  <span class=\"comment\">//到达最后一行表示递归结束  </span></span><br><span class=\"line\">            List&lt;String&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">char</span>[] c: arr) l.add(String.valueOf(c));  </span><br><span class=\"line\">            res.add(l);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;n;k++)&#123;  <span class=\"comment\">//当前的选择列表，即在一行中选择位置填Q  </span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">sign</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(col[k]) <span class=\"keyword\">continue</span>;   <span class=\"comment\">//如果该列已经有Q  </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> a=r-<span class=\"number\">1</span>,b=k-<span class=\"number\">1</span>;a&gt;=<span class=\"number\">0</span>&amp;&amp;b&gt;=<span class=\"number\">0</span>;a--,b--)&#123;  <span class=\"comment\">//检查对角线是否有Q  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[a][b]==<span class=\"string\">&#x27;Q&#x27;</span>)&#123;  </span><br><span class=\"line\">                    sign = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sign) <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> a=r-<span class=\"number\">1</span>,b=k+<span class=\"number\">1</span>;a&gt;=<span class=\"number\">0</span>&amp;&amp;b&lt;n;a--,b++)&#123;  <span class=\"comment\">//检查对角线是否有Q  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[a][b]==<span class=\"string\">&#x27;Q&#x27;</span>)&#123;  </span><br><span class=\"line\">                    sign = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sign) <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">            arr[r][k] = <span class=\"string\">&#x27;Q&#x27;</span>;    </span><br><span class=\"line\">            col[k] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            backtrack(arr,col,n,r+<span class=\"number\">1</span>);  </span><br><span class=\"line\">            arr[r][k] = <span class=\"string\">&#x27;.&#x27;</span>;  </span><br><span class=\"line\">            col[k] = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"其他的dfs与回溯问题\">其他的DFS与回溯问题<a title=\"#其他的dfs与回溯问题\" href=\"#其他的dfs与回溯问题\"></a></h1>\n<p>有些问题中会给出一个二维数组，比如只包含0和1，然后说明这个数组的含义，比如岛屿和海洋，这类问题一般是用DFS或BFS在矩阵中进行搜索，一般搜索会有4个或8个方向，每次搜索的下一步也是如此；<br>\nDFS是深度优先遍历，是一种思想和工具，而回溯算法是对DFS的实现，是DFS的一种应用；</p>\n<h2 id=\"no.17-电话号码的字母组合\">NO.17 电话号码的字母组合<a title=\"#no.17-电话号码的字母组合\" href=\"#no.17-电话号码的字母组合\"></a></h2>\n<p>给定一个数字字符串（2-9），每个数字在手机九宫格键盘上都对应3或4个字母，求这个数字字符串可以对应的所有字母字符串的组合，如”23”的结果是[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”];<br>\n其实这道题容易想到是用回溯法，如果用树表示，则每一层是一个数字对应的所有字母，相互之间进行组合，但是由于水平太低不知道怎么实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCombinations</span><span class=\"params\">(String digits)</span> &#123;  </span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;()&#123;&#123;  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;abc&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;3&quot;</span>,<span class=\"string\">&quot;def&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;4&quot;</span>,<span class=\"string\">&quot;ghi&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;5&quot;</span>,<span class=\"string\">&quot;jkl&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;6&quot;</span>,<span class=\"string\">&quot;mno&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;7&quot;</span>,<span class=\"string\">&quot;pqrs&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;8&quot;</span>,<span class=\"string\">&quot;tuv&quot;</span>);  </span><br><span class=\"line\">            put(<span class=\"string\">&quot;9&quot;</span>,<span class=\"string\">&quot;wxyz&quot;</span>);  </span><br><span class=\"line\">        &#125;&#125;;  </span><br><span class=\"line\">        List&lt;String&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(digits.length()==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> l;  </span><br><span class=\"line\">        backtrack(map,l, <span class=\"string\">&quot;&quot;</span>, digits);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> l;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(Map&lt;String,String&gt; map, List&lt;String&gt; l, String result, String next_digits)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(next_digits.length()==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            l.add(result);  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> next_digits.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>);  <span class=\"comment\">//s是剩余digits的第一个字符(串)  </span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">letters</span> <span class=\"operator\">=</span> map.get(s);  <span class=\"comment\">//letters是s在键盘上对应的字母字符串  </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;letters.length();i++)&#123;  <span class=\"comment\">//遍历letters  </span></span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">letter</span> <span class=\"operator\">=</span> map.get(s).substring(i,i+<span class=\"number\">1</span>);  <span class=\"comment\">//letter是letters的第i个字符(串)  </span></span><br><span class=\"line\">                backtrack(map,l,result+letter,next_digits.substring(<span class=\"number\">1</span>));  <span class=\"comment\">//将result加上letter，next_digits去掉首字母  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>看了答案还是有点懵，还需要多体会一下。</p>\n<h2 id=\"no.78-子集\">NO.78 子集<a title=\"#no.78-子集\" href=\"#no.78-子集\"></a></h2>\n<p>给定一个数组nums，找出nums的所有不重复子集（包含空集），首先想到的方法就是回溯，这也可以看作一个非常基本的回溯问题；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        Arrays.sort(nums);  </span><br><span class=\"line\">        backtrack(nums,result,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,List&lt;List&lt;Integer&gt;&gt; result,<span class=\"type\">int</span> i,List&lt;Integer&gt; l)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;nums.length)&#123;<span class=\"keyword\">return</span> ;&#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!result.contains(l))&#123;  </span><br><span class=\"line\">            result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(l));  <span class=\"comment\">//这里不能加return，因为不能终止递归；  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"comment\">//这里的循环可以理解为从一个节点产生所有分支，然后递归到第一个分支。。。  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> start=i;start&lt;nums.length;start++)&#123;  </span><br><span class=\"line\">            l.add(nums[start]);  </span><br><span class=\"line\">            backtrack(nums,result,start+<span class=\"number\">1</span>,l);  </span><br><span class=\"line\">            l.remove(l.size()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这里的回溯部分就用for循环的方式写了，其实for循环很容易和回溯的思想联系起来，一开始从根节点进行分支，然后在第一个子节点进行分支，由此进行深度优先遍历。<br>\n提交之后发现回溯解法比较耗时，也就是还有更好的解法，根据评论区大佬的提示，可以先用空列表初始化一个二维列表，然后对于nums中的每个元素，遍历一遍二维列表，将每个一维列表添加nums的元素，并作为新列表添加到二维列表；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">subsets</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n:nums)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> result.size();  <span class=\"comment\">//这里的result.size()不能写在循环里  </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;  </span><br><span class=\"line\">                List&lt;Integer&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(result.get(i));  </span><br><span class=\"line\">                l.add(n);  </span><br><span class=\"line\">                result.add(l);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.79-单词搜索\">NO.79 单词搜索<a title=\"#no.79-单词搜索\" href=\"#no.79-单词搜索\"></a></h2>\n<p>给定一个字母矩阵和一个单词，找出这个单词能否由矩阵的一条路径构成，不能重复使用字母；这也是回溯法的思想，对于当前的位置，需要判断其上下左右(如果存在)的字母的值，但是根据之前的框架又很难写出代码，所以这个求解代码就好好感悟一下吧！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">exist</span><span class=\"params\">(<span class=\"type\">char</span>[][] board, String word)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[][] dir = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[][]&#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;&#125;;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;board.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;board[<span class=\"number\">0</span>].length;j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(board[i][j]==word.charAt(<span class=\"number\">0</span>))&#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(backtrack(board,word,i,j,<span class=\"number\">0</span>))&#123;  </span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">char</span>[][] board,String word,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">int</span> len)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len&gt;=word.length()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span> || i&gt;=board.length || j&lt;<span class=\"number\">0</span> || j&gt;=board[<span class=\"number\">0</span>].length || board[i][j]!=word.charAt(len))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        board[i][j] -= <span class=\"number\">26</span>;  </span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">sign</span> <span class=\"operator\">=</span> backtrack(board,word,i+<span class=\"number\">1</span>,j,len+<span class=\"number\">1</span>) || backtrack(board,word,i-<span class=\"number\">1</span>,j,len+<span class=\"number\">1</span>) || backtrack(board,word,i,j+<span class=\"number\">1</span>,len+<span class=\"number\">1</span>) || backtrack(board,word,i,j-<span class=\"number\">1</span>,len+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        board[i][j] += <span class=\"number\">26</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> sign;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这里的backtrack函数是返回一个布尔变量，所以每次递归调用的时候都需要接收其返回值；</p>\n<h2 id=\"no.93-复原ip地址\">NO.93 复原IP地址<a title=\"#no.93-复原ip地址\" href=\"#no.93-复原ip地址\"></a></h2>\n<p>IP地址分为四部分，用<code>.</code>隔开，最大长度是12，最小长度是4，给定一个字符串，可以在字符串中添加符号<code>.</code>，求所有可能组成的IP地址，如给定s=”25525511135”，结果为[“255.255.11.135”,<br>\n“255.255.111.35”]；<br>\n其实这道题很容易想到用回溯法，但是实现起来又是一个问题，我想到的是从一个空字符串开始，每次可以添加s的一个字符，或是添加<code>.</code>，停止条件：当<code>.</code>的数量达到3以上，停止回溯，当s遍历结束，停止回溯（判断）；<br>\n判断得到的ip是否合法可以用另外一个函数judge，将ip按<code>.</code>分割，如果部分字符串的长度大于3，或是转换成整数后不在0到255内，返回false，否则返回true；<br>\n（太菜了，题解没看懂，就贴上自己写的方法）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">restoreIpAddresses</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.length()&gt;<span class=\"number\">12</span> || s.length()&lt;<span class=\"number\">4</span>) <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">        backtrack(result, s, s.substring(<span class=\"number\">0</span>,<span class=\"number\">1</span>), <span class=\"number\">0</span>, <span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(List&lt;String&gt; result, String s ,String tmp, <span class=\"type\">int</span> count, <span class=\"type\">int</span> i)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count&gt;<span class=\"number\">3</span>) <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=s.length() || tmp.length()-<span class=\"number\">3</span>==s.length())&#123;  </span><br><span class=\"line\">            System.out.println(tmp);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count==<span class=\"number\">3</span> &amp;&amp; judge(tmp))&#123;  </span><br><span class=\"line\">                result.add(tmp);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        tmp = tmp+<span class=\"string\">&quot;.&quot;</span>+s.substring(i,i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        backtrack(result,s,tmp,count+<span class=\"number\">1</span>,i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        tmp = tmp.substring(<span class=\"number\">0</span>,tmp.length()-<span class=\"number\">2</span>);  </span><br><span class=\"line\">            </span><br><span class=\"line\">        tmp = tmp+s.substring(i,i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        backtrack(result,s,tmp,count,i+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        tmp = tmp.substring(<span class=\"number\">0</span>,tmp.length()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(String ip)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s: ip.split(<span class=\"string\">&quot;\\\\.&quot;</span>))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.length()&gt;<span class=\"number\">1</span> &amp;&amp; s.charAt(<span class=\"number\">0</span>)==<span class=\"string\">&#x27;0&#x27;</span> || s.length()&gt;<span class=\"number\">3</span>)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> Integer.parseInt(s);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">0</span>&gt;n || n&gt;<span class=\"number\">255</span>)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.131-分割回文串\">NO.131 分割回文串<a title=\"#no.131-分割回文串\" href=\"#no.131-分割回文串\"></a></h2>\n<p>将给定的字符串为分割回文子串，要求返回所有的分割结果；<br>\n一开始没有想通，还是以为每次增加一个字符，这样就想错了，因该是判断当前的一个子串是否是回文串，如果是就添加到结果列表里面，子串的截取是从上一个回文子串的末尾开始的；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    List&lt;List&lt;String&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">partition</span><span class=\"params\">(String s)</span> &#123;  </span><br><span class=\"line\">        dfs(s,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;());  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(String s,<span class=\"type\">int</span> i,List&lt;String&gt; l)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;s.length()) <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==s.length())&#123;  </span><br><span class=\"line\">            res.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(l));  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=i;k&lt;s.length();k++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!judge(s,i,k)) <span class=\"keyword\">continue</span>;  </span><br><span class=\"line\">            l.add(s.substring(i,k+<span class=\"number\">1</span>));  </span><br><span class=\"line\">            dfs(s,k+<span class=\"number\">1</span>,l);  </span><br><span class=\"line\">            l.remove(l.size()-<span class=\"number\">1</span>);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(String s,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;r)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.charAt(l++)!=s.charAt(r--)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.200-岛屿数量\">NO.200 岛屿数量<a title=\"#no.200-岛屿数量\" href=\"#no.200-岛屿数量\"></a></h2>\n<p>同样是给定一个01矩阵，其中1表示陆地，相连的陆地为一块岛屿，这道题不是求岛屿的面积，而是求岛屿的数量；<br>\n这里主要记录一下关于这类求数量的DFS问题，一般是遍历矩阵，遇到1则从这个位置开始DFS遍历，将遍历过的位置置为0，这样一次遍历就“消灭”一块岛屿，使用一个变量计数可以得到岛屿的数量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span>[][] direct = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;&#125;;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numIslands</span><span class=\"params\">(<span class=\"type\">char</span>[][] grid)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> h=grid.length, w=grid[<span class=\"number\">0</span>].length;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;h;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;w;j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j]==<span class=\"string\">&#x27;1&#x27;</span>)&#123;  </span><br><span class=\"line\">                    dfs(grid, i, j);  </span><br><span class=\"line\">                    count++;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">char</span>[][] grid, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> h=grid.length, w=grid[<span class=\"number\">0</span>].length;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span> || i&gt;=h || j&lt;<span class=\"number\">0</span> || j&gt;=w || grid[i][j]!=<span class=\"string\">&#x27;1&#x27;</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        grid[i][j] = <span class=\"string\">&#x27;0&#x27;</span>;  </span><br><span class=\"line\">        dfs(grid, i+<span class=\"number\">1</span>, j);  </span><br><span class=\"line\">        dfs(grid, i-<span class=\"number\">1</span>, j);  </span><br><span class=\"line\">        dfs(grid, i, j+<span class=\"number\">1</span>);  </span><br><span class=\"line\">        dfs(grid, i, j-<span class=\"number\">1</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.322-零钱兑换\">NO.322 零钱兑换<a title=\"#no.322-零钱兑换\" href=\"#no.322-零钱兑换\"></a></h2>\n<p>给定一些不同面额的硬币coins和一个总金额amount，将总金额兑换成数量最少的硬币，如果不能兑换返回-1；<br>\n这题很容易想到使用回溯法，因为大不了将所有的兑换结果都求出来，然后再记录数量最少的结果，但是这样做超时了；<br>\n当然，兑换是从最大面额的硬币开始兑换，但是很容易出现一种面额的硬币重复兑换很多次，如果每次都要递归的话就很耗时了，因此可以计算出可以兑换的一种硬币最大数量，同时注意剪枝，将结果明显大于当前最小数量的结果略掉：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">coinChange</span><span class=\"params\">(<span class=\"type\">int</span>[] coins, <span class=\"type\">int</span> amount)</span> &#123;  </span><br><span class=\"line\">        Arrays.sort(coins);  </span><br><span class=\"line\">        backtrack(coins,coins.length-<span class=\"number\">1</span>,amount,<span class=\"number\">0</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result==Integer.MAX_VALUE?-<span class=\"number\">1</span>:result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">int</span>[] coins,<span class=\"type\">int</span> i, <span class=\"type\">int</span> res, <span class=\"type\">int</span> count)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            result = Math.min(result,count);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span> || res&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> res/coins[i];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> start=k;start&gt;=<span class=\"number\">0</span>;start--)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count+start&gt;result) <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            System.out.println(start);  </span><br><span class=\"line\">            backtrack(coins,i-<span class=\"number\">1</span>,res-start*coins[i],count+start);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>最后的for循环其实没有很明白；</p>\n<h2 id=\"no.337-打家劫舍iii\">NO.337 打家劫舍III<a title=\"#no.337-打家劫舍iii\" href=\"#no.337-打家劫舍iii\"></a></h2>\n<p>这次偷窃的是按照树形排列的房屋，并且要求不能同时偷窃相连的两个房屋，求可以盗取的最大金额；<br>\n本来一看到打家劫舍就想到了动态规划，但是这居然是一个树的问题，又要用到DFS；对于当前的节点有两种选择：1.盗取当前的节点，然后放弃左右孩子节点；2.放弃当前节点，从左右孩子节点中盗取最大值，按照此思路实现的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(TreeNode root)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// 最高金额是下面的最大值：  </span></span><br><span class=\"line\">        <span class=\"comment\">// 1.抢劫当前节点和抢劫左右节点的子树的值；  </span></span><br><span class=\"line\">        <span class=\"comment\">// 2.抢劫当前节点的左右子树的值；  </span></span><br><span class=\"line\">        <span class=\"comment\">// 依次递归求解  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.left!=<span class=\"literal\">null</span>) val += rob(root.left.left)+rob(root.left.right);  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(root.right!=<span class=\"literal\">null</span>) val += rob(root.right.left)+rob(root.right.right);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> Math.max(root.val+val,rob(root.left)+rob(root.right));  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>上面的写法很费时，按照上面的思想，可以用长度为2的dp数组完成,dp[0]表示不抢劫当前节点所得到的最多的钱，dp[1]表示抢劫当前节点得到的最多的钱，每一个节点都有一个dp数组，最后得到根节点的dp数组就是结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(TreeNode root)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] result = dp(root);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(result[<span class=\"number\">0</span>],result[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] dp(TreeNode root)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] l = dp(root.left);  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] r = dp(root.right);  </span><br><span class=\"line\">        <span class=\"type\">int</span>[] tmp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];  <span class=\"comment\">// 当前节点的dp数组  </span></span><br><span class=\"line\">        tmp[<span class=\"number\">0</span>] = Math.max(l[<span class=\"number\">0</span>],l[<span class=\"number\">1</span>])+Math.max(r[<span class=\"number\">0</span>],r[<span class=\"number\">1</span>]);  <span class=\"comment\">//不抢劫root的最大获益  </span></span><br><span class=\"line\">        tmp[<span class=\"number\">1</span>] = root.val+l[<span class=\"number\">0</span>]+r[<span class=\"number\">0</span>];  <span class=\"comment\">//抢劫root的最大获益  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tmp;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.417-太平洋大西洋水流问题\">NO.417 太平洋大西洋水流问题<a title=\"#no.417-太平洋大西洋水流问题\" href=\"#no.417-太平洋大西洋水流问题\"></a></h2>\n<p>给定一个矩阵表示一片大陆上每个位置的高度，太平洋位于左边界和上边界，大西洋位于右边界和下边界，规定水流只能按照上下左右四个方向流动，并且不能向高度更高的地方流动，要求找到所有既可以流到太平洋又可以流到大西洋的坐标；<br>\n这道题乍一看给出的是一个矩阵，其实就可以想到是用DFS，一开始是想遍历矩阵，对每一个位置都进行DFS，如果该位置可以流到太平洋和大西洋，就记录坐标，看起来想法很简单，但是实际写代码还要考虑其他问题：DFS中如何记录已经遍历过的位置，如何同时判断可以流到太平洋和大西洋……当然可以硬着头皮写，这样的结果就是费时费力，而且结果不优，因此做题不能只靠主观想法，可能想法很简单，但是实际实现不容易，还要想想策略；<br>\n这道题有一个非常巧妙地想法：逆流，即不考虑从当前位置能否同时流到两个大洋，而是考虑从两个大洋可以逆流到大陆中地哪些位置，并且使用两个矩阵，一个表示太平洋可以逆流流到的位置，另一个表示大西洋可以逆流流到的位置，并且可以将逆流流到的位置的值置为true，从而记录DFS中已经遍历的位置防止重复遍历，最后将两个矩阵中同时为true的位置坐标保存即是结果；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">int</span>[][] direct = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;&#125;;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">pacificAtlantic</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix)</span> &#123;  </span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(matrix.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">        <span class=\"type\">int</span> h=matrix.length, w=matrix[<span class=\"number\">0</span>].length;  </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] Pacific = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[h][w];  </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[][] Atlantic = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[h][w];  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;h;i++)&#123;  </span><br><span class=\"line\">            dfs(matrix,i,<span class=\"number\">0</span>,Pacific,matrix[i][<span class=\"number\">0</span>]);  </span><br><span class=\"line\">            dfs(matrix,i,w-<span class=\"number\">1</span>,Atlantic,matrix[i][w-<span class=\"number\">1</span>]);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;w;j++)&#123;  </span><br><span class=\"line\">            dfs(matrix,<span class=\"number\">0</span>,j,Pacific,matrix[<span class=\"number\">0</span>][j]);  </span><br><span class=\"line\">            dfs(matrix,h-<span class=\"number\">1</span>,j,Atlantic,matrix[h-<span class=\"number\">1</span>][j]);              </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> m=<span class=\"number\">0</span>;m&lt;h;m++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n=<span class=\"number\">0</span>;n&lt;w;n++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Pacific[m][n] &amp;&amp; Atlantic[m][n])&#123;  </span><br><span class=\"line\">                    List&lt;Integer&gt; l = Arrays.asList(m,n);  </span><br><span class=\"line\">                    result.add(l);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[][] matrix,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j,<span class=\"type\">boolean</span>[][] record,<span class=\"type\">int</span> pre)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span> || i&gt;=matrix.length || j&lt; <span class=\"number\">0</span> || j&gt;=matrix[<span class=\"number\">0</span>].length || record[i][j] || matrix[i][j]&lt;pre)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        record[i][j] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] d: direct)&#123;  </span><br><span class=\"line\">            dfs(matrix,i+d[<span class=\"number\">0</span>],j+d[<span class=\"number\">1</span>],record,matrix[i][j]);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.473-火柴拼正方向\">NO.473 火柴拼正方向<a title=\"#no.473-火柴拼正方向\" href=\"#no.473-火柴拼正方向\"></a></h2>\n<p>给定一个数组，其中每个数字表示火柴的长度，判断用所有的火柴能不能拼成一个正方形；<br>\n题目的意思非常简单，但是一开始并没有想到用DFS怎么做，其实可以把问题看作往四条边上放火柴，正方形的边长是可以算出来的，如果有一条边的长度大于边长，则这个情况就不符合，所以还是遍历所有情况，然后找出符合要求的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">makesquare</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n: nums) sum += n;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum%<span class=\"number\">4</span>!=<span class=\"number\">0</span> || nums.length&lt;<span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        Arrays.sort(nums);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(nums,nums.length-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,sum/<span class=\"number\">4</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,<span class=\"type\">int</span> i,<span class=\"type\">int</span> l1,<span class=\"type\">int</span> l2,<span class=\"type\">int</span> l3,<span class=\"type\">int</span> l4,<span class=\"type\">int</span> len)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1&gt;len || l2&gt;len || l3&gt;len || l4&gt;len) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l1==len &amp;&amp; l2==len &amp;&amp; l3==len &amp;&amp; l4==len)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(nums,i-<span class=\"number\">1</span>,l1+nums[i],l2,l3,l4,len) || dfs(nums,i-<span class=\"number\">1</span>,l1,l2+nums[i],l3,l4,len) || dfs(nums,i-<span class=\"number\">1</span>,l1,l2,l3+nums[i],l4,len) || dfs(nums,i-<span class=\"number\">1</span>,l1,l2,l3,l4+nums[i],len);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这种题目是遍历所有情况，只要其中有一种符合要求，就可以得到最终的结果，而有的题目是需要在所有情况中找出符合要求的多种结果；<br>\n换个角度可以把这个问题看成用四个容量相等的桶接水的问题，解题思路和上面一样，换个写法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">makesquare</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n: nums) sum += n;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sum%<span class=\"number\">4</span>!=<span class=\"number\">0</span> || nums.length&lt;<span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        Arrays.sort(nums);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> judge(nums,nums.length-<span class=\"number\">1</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4</span>],sum/<span class=\"number\">4</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(<span class=\"type\">int</span>[] nums,<span class=\"type\">int</span> i,<span class=\"type\">int</span>[] edge,<span class=\"type\">int</span> len)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[<span class=\"number\">0</span>]==len &amp;&amp; edge[<span class=\"number\">1</span>]==len &amp;&amp; edge[<span class=\"number\">2</span>]==len &amp;&amp; edge[<span class=\"number\">3</span>]==len)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">4</span>;k++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edge[k]&lt;len &amp;&amp; edge[k]+nums[i]&lt;=len)&#123;  </span><br><span class=\"line\">                edge[k] += nums[i];  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(judge(nums,i-<span class=\"number\">1</span>,edge,len)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                edge[k] -= nums[i];  <span class=\"comment\">//用第k个桶接水只是一种尝试，需要还原；  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.542-01矩阵\">NO.542 01矩阵<a title=\"#no.542-01矩阵\" href=\"#no.542-01矩阵\"></a></h2>\n<p>给定一个矩阵包含0和1，计算矩阵中每个位置距离最近的0的距离；<br>\n这题一开始也是想着用DFS，如果当前位置的值不为0，取当前位置四个方向各个位置“距0最短距离”的最小值加1，这因该是最直观的想法，应该是可行的，但是结果里总有几个位置的值计算错了，没想明白；<br>\n其实这题可以用点小技巧，使用<strong>广度优先遍历BFS</strong><br>\n，先将矩阵中为0的位置入队，为1的位置置为MAX_VALUE（表示这些值需要修改）；每次出队一个位置，计算该位置周围四个方向的值：如果小于等于中间值则不用修改，如果大于中间值则等于中间值加1，并将该位置入队（根据该位置修改的结果再修改周围四个方向的值）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] updateMatrix(<span class=\"type\">int</span>[][] matrix) &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span>[][] direct = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;-<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;,&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>&#125;,&#123;<span class=\"number\">0</span>,-<span class=\"number\">1</span>&#125;&#125;;  </span><br><span class=\"line\">        Queue&lt;<span class=\"type\">int</span>[]&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;matrix.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;matrix[<span class=\"number\">0</span>].length;j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(matrix[i][j]==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">                    q.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;i,j&#125;);  </span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                    matrix[i][j] = Integer.MAX_VALUE;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.isEmpty())&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span>[] tmp = q.poll();  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] d: direct)&#123;  </span><br><span class=\"line\">                <span class=\"type\">int</span> x=tmp[<span class=\"number\">0</span>]+d[<span class=\"number\">0</span>], y=tmp[<span class=\"number\">1</span>]+d[<span class=\"number\">1</span>];  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(x&gt;=<span class=\"number\">0</span> &amp;&amp; x&lt;matrix.length &amp;&amp; y&gt;=<span class=\"number\">0</span> &amp;&amp; y&lt;matrix[<span class=\"number\">0</span>].length)&#123;  </span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(matrix[x][y]&gt;matrix[tmp[<span class=\"number\">0</span>]][tmp[<span class=\"number\">1</span>]]+<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                        matrix[x][y] = matrix[tmp[<span class=\"number\">0</span>]][tmp[<span class=\"number\">1</span>]]+<span class=\"number\">1</span>;  </span><br><span class=\"line\">                        q.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;x,y&#125;);  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> matrix;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>感悟就是不要一看到这种搜索有关的题就只想到用DFS，偶尔也要想想用BFS能不能做（BFS一般通过队列实现），和这样非常相似的<code>NO.1162 地图分析</code>这道题。</p>\n<h2 id=\"no.547-朋友圈\">NO.547 朋友圈<a title=\"#no.547-朋友圈\" href=\"#no.547-朋友圈\"></a></h2>\n<p>还是给定一个二维01数组，但是这里的含义不一样，[i,j]表示第i个人和第j个人是朋友，因此属于一个朋友圈，求朋友圈的数量，一开始看到感觉和岛屿数量类似，但是岛屿是向四个方向遍历，而这里有点像图的邻接矩阵，第i行中为1的列都是i的朋友，由此得到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findCircleNum</span><span class=\"params\">(<span class=\"type\">int</span>[][] M)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;M.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;M[<span class=\"number\">0</span>].length;j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;i &amp;&amp; M[i][j]==<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                    search(M,i,j);  </span><br><span class=\"line\">                    count++;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(set.size()&lt;M.length)&#123;  </span><br><span class=\"line\">            count += M.length-set.size();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[][] M,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>&#123;  </span><br><span class=\"line\">        Queue&lt;<span class=\"type\">int</span>[]&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> n=i+<span class=\"number\">1</span>;n&lt;M.length;n++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(M[i][n]==<span class=\"number\">1</span>) q.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;i,n&#125;);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        set.add(i);  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!q.isEmpty())&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span>[] tmp = q.poll();  </span><br><span class=\"line\">            M[tmp[<span class=\"number\">0</span>]][tmp[<span class=\"number\">1</span>]] = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            M[tmp[<span class=\"number\">1</span>]][tmp[<span class=\"number\">0</span>]] = <span class=\"number\">0</span>;  </span><br><span class=\"line\">            set.add(tmp[<span class=\"number\">1</span>]);  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;M[<span class=\"number\">0</span>].length;k++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(tmp[<span class=\"number\">1</span>]!=k &amp;&amp; M[tmp[<span class=\"number\">1</span>]][k]==<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                    q.offer(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;tmp[<span class=\"number\">1</span>],k&#125;);  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>这样可以做，但是比较耗时，下面的大佬的解法；<br>\n其实不用遍历矩阵，因为总人数都知道的，并且两个人是互为朋友的，可以建立一个boolean数组，表示第i个人有没有加入朋友圈，没有的话就进行一次搜索，并将i置为true，每次搜索会将同一个朋友圈的人都置为true，因此搜索的次数就是朋友圈的数量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findCircleNum</span><span class=\"params\">(<span class=\"type\">int</span>[][] M)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">boolean</span>[] record = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[M.length];  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;M.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!record[i])&#123;  </span><br><span class=\"line\">                search(M,record,i);  </span><br><span class=\"line\">                count++;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[][] M,<span class=\"type\">boolean</span>[] record,<span class=\"type\">int</span> i)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;M.length;k++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(M[i][k]==<span class=\"number\">1</span> &amp;&amp; !record[k])&#123;  </span><br><span class=\"line\">                record[k] = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">                search(M,record,k);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>大佬不愧是大佬！</p>\n<h2 id=\"no.576-出界的路径数\">NO.576 出界的路径数<a title=\"#no.576-出界的路径数\" href=\"#no.576-出界的路径数\"></a></h2>\n<p>给出一个矩阵的大小，一个最大步数，一个位置坐标，从这个坐标开始，每次可以向上下左右走一步，走出矩阵边界则是一条出界路径，求所有的出界路径数；<br>\n一开始直接写DFS，结果超时，毕竟结果的数值这么大，没有想到更好的剪枝策略；记忆化搜索有点动态规划的思想，将之前的结果保存起来便于计算以减少耗时，这里是用一个HashMap记录，而HashMap的key为int[]又比较麻烦，值相同引用不同，于是就将i,j,N转换成字符串（这里需要注意以下记忆化搜索的使用，和动态规划的思想很像）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    Map&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findPaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n, <span class=\"type\">int</span> N, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">//map保存的是从[i,j]走到[x,y]后剩余步数为N再走到边界的路径数  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(m,n,N,i,j);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> m,<span class=\"type\">int</span> n,<span class=\"type\">int</span> N,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(N&lt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(N&lt;i+<span class=\"number\">1</span> &amp;&amp; N&lt;j+<span class=\"number\">1</span> &amp;&amp; N&lt;m-i &amp;&amp; N&lt;n-j) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span> || i&gt;=m || j&lt;<span class=\"number\">0</span> || j&gt;=n)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.containsKey(i+<span class=\"string\">&quot;,&quot;</span>+j+<span class=\"string\">&quot;,&quot;</span>+N))&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> map.get(i+<span class=\"string\">&quot;,&quot;</span>+j+<span class=\"string\">&quot;,&quot;</span>+N);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        count = (count+dfs(m,n,N-<span class=\"number\">1</span>,i+<span class=\"number\">1</span>,j))%<span class=\"number\">1000000007</span>;  </span><br><span class=\"line\">        count = (count+dfs(m,n,N-<span class=\"number\">1</span>,i-<span class=\"number\">1</span>,j))%<span class=\"number\">1000000007</span>;  </span><br><span class=\"line\">        count = (count+dfs(m,n,N-<span class=\"number\">1</span>,i,j+<span class=\"number\">1</span>))%<span class=\"number\">1000000007</span>;  </span><br><span class=\"line\">        count = (count+dfs(m,n,N-<span class=\"number\">1</span>,i,j-<span class=\"number\">1</span>))%<span class=\"number\">1000000007</span>;  </span><br><span class=\"line\">        map.put(i+<span class=\"string\">&quot;,&quot;</span>+j+<span class=\"string\">&quot;,&quot;</span>+N,count);  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.695-岛屿的最大面积\">NO.695 岛屿的最大面积<a title=\"#no.695-岛屿的最大面积\" href=\"#no.695-岛屿的最大面积\"></a></h2>\n<p>给定一个矩阵包含0和1，其中1表示陆地，0表示海水，找出矩阵中最大的岛屿面积；<br>\n对于这个问题就需要从某个为1的位置开始DFS，对于每个位置搜索其上下左右四个方向，并将一块陆地的面积累加；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxAreaOfIsland</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;grid.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;grid[<span class=\"number\">0</span>].length;j++)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j]==<span class=\"number\">1</span>)&#123;  </span><br><span class=\"line\">                    max = Math.max(max,backtrack(grid,i,j));  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid,<span class=\"type\">int</span> i,<span class=\"type\">int</span> j)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&lt;<span class=\"number\">0</span> || i&gt;=grid.length || j&lt;<span class=\"number\">0</span> || j&gt;=grid[<span class=\"number\">0</span>].length || grid[i][j]!=<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        grid[i][j] -= <span class=\"number\">1</span>;  </span><br><span class=\"line\">        sum += backtrack(grid,i,j+<span class=\"number\">1</span>)+backtrack(grid,i+<span class=\"number\">1</span>,j)+backtrack(grid,i,j-<span class=\"number\">1</span>)+backtrack(grid,i-<span class=\"number\">1</span>,j);  </span><br><span class=\"line\">        <span class=\"comment\">// grid[i][j] += 1;  //不用还原，遍历过的位置就不用再遍历了  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>NO.79中遍历过的字符需要还原是因为该字母之后还可能会用到，而本题中遍历过的位置之后不用再遍历；</p>\n<h2 id=\"no.5406-收集树上所有苹果的最少时间\">NO.5406 收集树上所有苹果的最少时间<a title=\"#no.5406-收集树上所有苹果的最少时间\" href=\"#no.5406-收集树上所有苹果的最少时间\"></a></h2>\n<p>给定一个二维数组，n个数都是在0到n-1之间，其中[i,j]表示i连向j，因此这个二维数组可以看作，因此每个数可以看作一个节点，二维数组表示节点之间的连接，此外还有一个boolean数组hasApple，hasApple[i]表示第i个节点是一个苹果，要求的是如果要摘下这棵树的所有苹果，需要走的最短路径是多少？<br>\n<img src=\"images/Java_DFS_Backtrack/NO5406.png\" alt=\"\" loading=\"lazy\"><br>\n一开始是想求出每个苹果节点的深度，但是有的节点是会共用一条路径的，所以单纯求深度不行，要保证路径不会重复使用，想来想去只能用递归之前只会用无返回值的dfs，这里直接返回结果的想了很久，而且一开始是用二维list，每个位置i保存i的下一个数，但是光建立list都要O(n^2)时间，因此一直超时，后来才发现可以用HashMap，只需要O(n)时间建表：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    Map&lt;Integer,List&lt;<span class=\"type\">int</span>[]&gt;&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minTime</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span>[][] edges, List&lt;Boolean&gt; hasApple)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] l: edges)&#123;  </span><br><span class=\"line\">            List&lt;<span class=\"type\">int</span>[]&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(map.containsKey(l[<span class=\"number\">0</span>]))&#123;  </span><br><span class=\"line\">                list = map.get(l[<span class=\"number\">0</span>]);  </span><br><span class=\"line\">                list.add(l);  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; list.add(l);&#125;  </span><br><span class=\"line\">            map.put(l[<span class=\"number\">0</span>],list);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>*traverse(hasApple,<span class=\"number\">0</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"comment\">//计算获取一棵子树里的所有苹果所需要的最短路径长度，如果子树只有一个节点返回0；  </span></span><br><span class=\"line\">    <span class=\"comment\">//对于根节点n的每个子节点i，加上递归求解子树i的结果  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">traverse</span><span class=\"params\">(List&lt;Boolean&gt; hasApple,<span class=\"type\">int</span> i)</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//如果越界或i是叶子节点没有子节点，返回0；  </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!map.containsKey(i)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;    </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  <span class=\"comment\">//收集以i为根节点的子树最短路径长度  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span>[] k: map.get(i))&#123;  <span class=\"comment\">//遍历i的每一个子节点  </span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> traverse(hasApple,k[<span class=\"number\">1</span>]);  <span class=\"comment\">//对子节点递归求解  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(tmp&gt;<span class=\"number\">0</span>)&#123;  <span class=\"comment\">//如果子树上有苹果，加上路径长度+1  </span></span><br><span class=\"line\">                count += tmp+<span class=\"number\">1</span>;  </span><br><span class=\"line\">            <span class=\"comment\">//否则，如果子树只有一个节点。且该节点是一个苹果则+1  </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(hasApple.get(k[<span class=\"number\">1</span>]))&#123;    </span><br><span class=\"line\">                count += <span class=\"number\">1</span>;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"no.面试题17.22-单词转换\">NO.面试题17.22 单词转换<a title=\"#no.面试题17.22-单词转换\" href=\"#no.面试题17.22-单词转换\"></a></h2>\n<p>给定两个单词beginWord和endWord，和一个单词表wordList，要将beginWord转换为endWord，要求每次只能变动一个字母，并且每次变动的结果要在单词表中，返回单词变换的过程，如：<code>[&quot;hit&quot;,&quot;hot&quot;,&quot;dot&quot;,&quot;lot&quot;,&quot;log&quot;,&quot;cog&quot;]</code>；<br>\n这个问题相当于在一个图上找两个点之间的一条路径，也可以看作一颗树上的节点，因此可以使用DFS来做，关键在于只需要返回一个结果，如果还是遍历所有结果那么就会超时了；<br>\n思路一：对每个单词找到其所有可以转换的单词，存放在HashMap中，然后使用DFS，这样做在建立HashMap的时候比较费时间；思路二：不建立HashMap，每次都遍历wordList寻找下一个可以转换的单词；定义dfs()方法的作用就是根据单词表wordList返回beginWord到endWord的变换过程，因此是一个递归的过；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">findLadders</span><span class=\"params\">(String beginWord, String endWord, List&lt;String&gt; wordList)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!wordList.contains(endWord)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(wordList,beginWord,endWord,<span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">dfs</span><span class=\"params\">(List&lt;String&gt; wordList,String str,String end,Set&lt;String&gt; set)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.equals(end))&#123;  </span><br><span class=\"line\">            List&lt;String&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;()&#123;&#123;add(str);&#125;&#125;;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> l;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        set.add(str);  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String s: wordList)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!set.contains(s) &amp;&amp; judge(str,s))&#123;  </span><br><span class=\"line\">                List&lt;String&gt; result = dfs(wordList,s,end,set);  </span><br><span class=\"line\">                <span class=\"keyword\">if</span>(result.size()!=<span class=\"number\">0</span>)&#123;  <span class=\"comment\">//防止转换不存在  </span></span><br><span class=\"line\">                    result.add(<span class=\"number\">0</span>,str);  </span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">judge</span><span class=\"params\">(String s1, String s2)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s1.length()!=s2.length()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s1.length();i++)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s1.charAt(i)!=s2.charAt(i))&#123;  </span><br><span class=\"line\">                count++;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count&gt;<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> count!=<span class=\"number\">0</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n","prev":{"title":"Java-动态规划算法","link":"2020/03/09/blog/Java_DynamicProgramming"},"next":{"title":"学习笔记：Java中的注解与反射(一)","link":"2020/03/08/blog/Java_annotation"},"plink":"https://qfzack.github.io/2020/03/08/blog/Java_DFS_Backtrack/","toc":[{"id":"1.组合总数问题","title":"1.组合总数问题","index":"1","children":[{"id":"no.39-组合总数","title":"NO.39 组合总数","index":"1.1"},{"id":"no.40-组合总数ii","title":"NO.40 组合总数II","index":"1.2"},{"id":"no.216-组合总数iii","title":"NO.216 组合总数III","index":"1.3"},{"id":"no.377-组合总数iv","title":"NO.377 组合总数IV","index":"1.4"}]},{"id":"2.图的拓扑排序","title":"2.图的拓扑排序","index":"2","children":[{"id":"no.210-课程表ii","title":"NO.210 课程表II","index":"2.1"}]},{"id":"3.八皇后等问题","title":"3.八皇后等问题","index":"3","children":[{"id":"no.37-解数独","title":"NO.37 解数独","index":"3.1"},{"id":"no.51-n皇后","title":"NO.51 N皇后","index":"3.2"}]},{"id":"其他的dfs与回溯问题","title":"其他的DFS与回溯问题","index":"4","children":[{"id":"no.17-电话号码的字母组合","title":"NO.17 电话号码的字母组合","index":"4.1"},{"id":"no.78-子集","title":"NO.78 子集","index":"4.2"},{"id":"no.79-单词搜索","title":"NO.79 单词搜索","index":"4.3"},{"id":"no.93-复原ip地址","title":"NO.93 复原IP地址","index":"4.4"},{"id":"no.131-分割回文串","title":"NO.131 分割回文串","index":"4.5"},{"id":"no.200-岛屿数量","title":"NO.200 岛屿数量","index":"4.6"},{"id":"no.322-零钱兑换","title":"NO.322 零钱兑换","index":"4.7"},{"id":"no.337-打家劫舍iii","title":"NO.337 打家劫舍III","index":"4.8"},{"id":"no.417-太平洋大西洋水流问题","title":"NO.417 太平洋大西洋水流问题","index":"4.9"},{"id":"no.473-火柴拼正方向","title":"NO.473 火柴拼正方向","index":"4.10"},{"id":"no.542-01矩阵","title":"NO.542 01矩阵","index":"4.11"},{"id":"no.547-朋友圈","title":"NO.547 朋友圈","index":"4.12"},{"id":"no.576-出界的路径数","title":"NO.576 出界的路径数","index":"4.13"},{"id":"no.695-岛屿的最大面积","title":"NO.695 岛屿的最大面积","index":"4.14"},{"id":"no.5406-收集树上所有苹果的最少时间","title":"NO.5406 收集树上所有苹果的最少时间","index":"4.15"},{"id":"no.面试题17.22-单词转换","title":"NO.面试题17.22 单词转换","index":"4.16"}]}],"reading_time":"10262 words in 68 min"}