{"title":"ubuntu下git的使用","date":"2020-10-11T05:00:00.000Z","date_formatted":{"ll":"Oct 11, 2020","L":"10/11/2020","MM-DD":"10-11"},"author":"Qingfeng Zhang","link":"2020/10/10/blog/ubuntu-git","categories":["Git","Linux"],"updated":"2025-04-13T10:41:26.406Z","content":"<ul>\n<li>最近在看廖雪峰老师的git教程，感觉讲的很好，但是容易忘记，而且命令也比较多，所以就在这整理一下笔记；</li>\n<li>git是目前最先进的分布式版本控制系统，是linux之父linus开发的，用于管理linux内核开发，与分布式版本控制系统相对的是集中式版本控制系统；</li>\n</ul>\n<h2 id=\"1.git的安装\">1.git的安装<a title=\"#1.git的安装\" href=\"#1.git的安装\"></a></h2>\n<ul>\n<li>先安装git：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install git  </span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装完成后还需要设置用户名和邮箱：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;Your Name&quot;  </span><br><span class=\"line\">git config --global user.email &quot;email@example.com&quot;  </span><br></pre></td></tr></table></figure>\n<h2 id=\"2.git版本库\">2.git版本库<a title=\"#2.git版本库\" href=\"#2.git版本库\"></a></h2>\n<ul>\n<li>进入一个文件夹，将其设置为git可管理的仓库：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init  </span><br></pre></td></tr></table></figure>\n<p>此时，文件夹里会多了一个.git目录，默认隐藏；</p>\n<ul>\n<li>当增加或修改了一个文件<code>file.txt</code>，将其<strong>从工作区添加到暂存区</strong> ：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add file.txt  </span><br></pre></td></tr></table></figure>\n<p>然后将文件<strong>从暂存区提交到当前分支</strong> ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m &#x27;creat a new txt file&#x27;  </span><br></pre></td></tr></table></figure>\n<p><code>-m</code>表示添加说明，最好加上；</p>\n<ul>\n<li>查看当前仓库的状态：<code>git status</code></li>\n<li>查看文件修改的部分：<code>git diff file.txt</code></li>\n</ul>\n<h2 id=\"3.git文件操作\">3.git文件操作<a title=\"#3.git文件操作\" href=\"#3.git文件操作\"></a></h2>\n<ul>\n<li>查看<strong>文件历史记录</strong> ：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  </span><br></pre></td></tr></table></figure>\n<p>或是<code>git log --pretty=oneline</code>和<code>git log --oneline --graph</code>简洁查看；</p>\n<ul>\n<li>将文件<strong>退回到上一版本</strong> ：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard HEAD^  </span><br></pre></td></tr></table></figure>\n<p>使用<code>HEAD^^</code>退回到上上个版本；<br>\n或是根据文件历史记录的<code>commit id</code><strong>退回到指定版本</strong> ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard 1904a  </span><br></pre></td></tr></table></figure>\n<p>文件的版本是由HEAD指向决定的；</p>\n<ul>\n<li>查看每一次的命令：<code>git reflog</code></li>\n</ul>\n<p><strong>撤销文件的修改</strong> ：</p>\n<ul>\n<li>如果文件只是在工作区进行了修改，没有添加到暂存区：<code>git checkout -- file.txt</code></li>\n<li>如果文件已经从工作区提交到暂存区：先用<code>git reset HEAD &lt;file.txt&gt;</code>，再用<code>git checkout -- file.txt</code></li>\n</ul>\n<p><strong>删除仓库中的文件</strong> ：<br>\n文件已经添加到了暂存区：</p>\n<ul>\n<li>在用<code>rm file.txt</code>删除文件后，还需要使用<code>git rm file.txt</code></li>\n<li>如果使用<code>rm file.txt</code>误删了文件，通过<code>git checkout -- file.txt</code>恢复</li>\n</ul>\n<h2 id=\"4.git远程仓库\">4.git远程仓库<a title=\"#4.git远程仓库\" href=\"#4.git远程仓库\"></a></h2>\n<p>github就是一个提供git仓库托管服务的服务器网站，本地git仓库与github之间的传输时通过SSH加密的，再第一次使用的时候需要创建<strong>远程连接</strong><br>\n，先<strong>创建SSH key</strong> ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;  </span><br></pre></td></tr></table></figure>\n<p>密码可以不输入，运行后会在主目录中的.ssh目录里由id_rsa和id_rsa.pub两个文件，分别是私钥和公钥；<br>\n然后，在<strong>github网站页面</strong> 的ssh keys中点击Add SSH<br>\nkey，将id_rsa.pub的内容复制到文本框内，点击添加；github允许添加多个ssh key；</p>\n<ul>\n<li><strong>提交到github上的远程仓库</strong> ：</li>\n</ul>\n<p>在SSH连接github后，如果想让远程仓库与本地仓库同步，先在github页面创建了新的repository，然后与本地repository进行关联：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:qfzack/my_repository.git  </span><br></pre></td></tr></table></figure>\n<p>origin是远程仓库的默认名称，可以修改，然后在本地进行第一次推送：<br>\n按照上文的git操作，先初始化本地仓库，然后添加所有文件，再进行提交，最后进行推送：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master  </span><br></pre></td></tr></table></figure>\n<p>-u表示建立关联，master表示当前分支，之后的推送可以简化为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master  </span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>克隆远程仓库到本地仓库</strong> ：</li>\n</ul>\n<p>使用仓库的地址进行克隆：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:michaelliao/gitskills.git  </span><br></pre></td></tr></table></figure>\n<h2 id=\"5.后续\">5.后续<a title=\"#5.后续\" href=\"#5.后续\"></a></h2>\n<p>后面的教程还包括分支管理和标签管理，是为了便于多人协同工作以及项目的管理，目前还用不上，就只是看了一遍留个印象，估计不久就忘记了。</p>\n<h2 id=\"6.使用过程中遇到的问题\">6.使用过程中遇到的问题<a title=\"#6.使用过程中遇到的问题\" href=\"#6.使用过程中遇到的问题\"></a></h2>\n<ul>\n<li><strong>问题一：</strong></li>\n</ul>\n<p>在尝试将服务器中的项目提交到github中，按照操作在push的时候出现了以下的错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: failed to push some refs to &#x27;git@github.com:qfzack/YOLOv3-pytorch-PCB.git&#x27;  </span><br><span class=\"line\">hint: Updates were rejected because the remote contains work that you do  </span><br><span class=\"line\">hint: not have locally. This is usually caused by another repository pushing  </span><br><span class=\"line\">hint: to the same ref. You may want to first integrate the remote changes  </span><br><span class=\"line\">hint: (e.g., &#x27;git pull ...&#x27;) before pushing again.  </span><br><span class=\"line\">hint: See the &#x27;Note about fast-forwards&#x27; in &#x27;git push --help&#x27; for details.  </span><br></pre></td></tr></table></figure>\n<p>这是因为在github创建repository的时候建立了README.md文件，而在本地没有这个文件，因此报错；<br>\n这种情况在实际的分工协作中也会出现，如果在我提交之前已经有另外一个人提交了，那么我的master分支就落后与远端，就需要先与远端同步再push，因此使用命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull --rebase origin master  </span><br></pre></td></tr></table></figure>\n<p>使得远端与本地同步，也就是本地的文件夹中多了README.md文件，然后再提交</p>\n<ul>\n<li><strong>问题二：</strong></li>\n</ul>\n<p>在push的过程中又遇到了新的问题：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">remote: error: GH001: Large files detected. You may want to try Git Large File Storage - https://git-lfs.github.com.  </span><br><span class=\"line\">remote: error: Trace: 1035a7622c0700369401b4d1756d93cd  </span><br><span class=\"line\">remote: error: See http://git.io/iEPt8g for more information.  </span><br><span class=\"line\">remote: error: File weights/darknet53.conv.74 is 154.96 MB; this exceeds GitHub&#x27;s file size limit of 100.00 MB  </span><br></pre></td></tr></table></figure>\n<p>是因为原文件夹里包含大文件，在提交的时候就不要提交这些文件了,但是删除之后再次push还是显示有之前的大文件，因为之前的提交没有撤回，先查看提交：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log  </span><br></pre></td></tr></table></figure>\n<p>然后执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --soft ID  </span><br></pre></td></tr></table></figure>\n<p>然后再次添加、提交后，push成功</p>\n<ul>\n<li><strong>笔记一：</strong></li>\n</ul>\n<p>针对上面遇到的问题，查了一些相关的资料，发现一个需要注意的点：如果想要把本地的改动更新到github服务器，必须要使用git进行操作，即如果想在本地删除文件，要用<code>git rm</code>不能直接用<code>rm</code>；<br>\n还有一个是<code>git add .</code>和<code>git add -u</code>和<code>git add -A</code>的区别<br>\n一开始我都是用<code>git add .</code>表示添加所有文件，但是在删除一些文件后用<code>git add .</code>再提交并push就不行了，因为<code>git add .</code>会将工作时的变化提交到暂存区，包括<strong>文件的修改(modified)和新文件(new)</strong> ，但就是<strong>不包括已删除的文件</strong> ，总结一下就是：</p>\n<blockquote>\n<p><code>git add .</code>提交所有修改和新建的数据到暂存区；<br>\n<code>git add -u</code>提交修改和被删除的文件到暂存区，其中-u等于-update；<br>\n<code>git add -A</code>提交所有被删除、替换、修改、新建的文件到暂存区，其中-A等于-all；</p>\n</blockquote>\n<ul>\n<li><strong>笔记二：</strong></li>\n</ul>\n<p>当有多个commit的信息重复时，可以对其进行合并：<br>\n先使用<code>git log --oneline</code>查看提交记录，然后合并前10条提交：<br>\n<code>git rebase -i HEAD~10</code><br>\n然后会出现vim编辑界面，将2到10条(第一条是最早的提交)提交的<code>pick</code>修改为<code>squash</code>(可以用<code>s</code>),表示与之前的提交合并，保存并退出会继续对合并信息进行编辑，编辑并保存即可</p>\n","prev":{"title":"Machine-Learing：GBDT与XGBoost","link":"2020/10/13/blog/gbdt_xgboost"},"next":{"title":"ubuntu下使用github搭建hexo博客","link":"2020/10/10/blog/ubuntu-github-hexo-blog"},"plink":"https://qfzack.github.io/2020/10/10/blog/ubuntu-git/","toc":[{"id":"1.git的安装","title":"1.git的安装","index":"1"},{"id":"2.git版本库","title":"2.git版本库","index":"2"},{"id":"3.git文件操作","title":"3.git文件操作","index":"3"},{"id":"4.git远程仓库","title":"4.git远程仓库","index":"4"},{"id":"5.后续","title":"5.后续","index":"5"},{"id":"6.使用过程中遇到的问题","title":"6.使用过程中遇到的问题","index":"6"}],"reading_time":"1723 words in 11 min"}