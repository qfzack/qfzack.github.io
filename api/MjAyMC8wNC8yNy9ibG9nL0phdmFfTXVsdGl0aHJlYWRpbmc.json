{"title":"学习笔记：Java并发、多线程","date":"2020-04-28T05:00:00.000Z","date_formatted":{"ll":"Apr 28, 2020","L":"04/28/2020","MM-DD":"04-28"},"author":"Qingfeng Zhang","link":"2020/04/27/blog/Java_Multithreading","categories":["Java"],"updated":"2025-09-14T16:04:23.642Z","content":"<h1 id=\"1.基本概念\">1.基本概念<a title=\"#1.基本概念\" href=\"#1.基本概念\"></a></h1>\n<h2 id=\"1.1-线程与进程\">1.1 线程与进程<a title=\"#1.1-线程与进程\" href=\"#1.1-线程与进程\"></a></h2>\n<p>操作系统是包含多个进程的容器，而每个进程又都是容纳多个线程的容器；<br>\n<strong>进程</strong> 是程序的一次运行，在用户下达运行程序的命令后，就会产生进程；可以把进程理解为程序的运行实例，是资源分配的基本单位；<br>\n<strong>线程</strong> 是CPU的基本调度单位，每个线程执行的都是进程代码的某个片段；</p>\n<p><strong>进程与线程的不同：</strong><br>\n1.处理器的速度远大于外设，线程是为了提高CPU的利用率；<br>\n2.进程是具有独立功能的程序运行的活动，是系统分配资源和调度的基本单位，线程是CPU的基本调度单位；<br>\n3.内存共享方式不同，进程之间的内存一般不共享，线程服务于同一个进程，之间可以通信；<br>\n4.拥有的资源不同，不同的线程会共享进程的代码段等信息，但每个线程都会有自己的堆栈；<br>\n5.一个进程至少包含一个线程；<br>\n6.线程开销更小，线程的创建、终止时间比进程短；<br>\n<strong>进程与线程的相似点：</strong> 生命周期（都包含创建、就绪、等待、运行、结束等状态）</p>\n<p>Java在设计之初就支持多线程，并且线程是一对一映射到操作系统的内核线程；<br>\nJVM会自动启动线程：<br>\nSignal Dispatcher：把操作系统发来的信号分发给适当的处理程序，连接操作系统和应用程序；<br>\nFinalizer：负责对象的finalize()方法；<br>\nReference Handler：和垃圾回收GC、引用相关的线程；<br>\nmain：主线程，用户程序的入口；</p>\n<h2 id=\"1.2-多线程\">1.2 多线程<a title=\"#1.2-多线程\" href=\"#1.2-多线程\"></a></h2>\n<p><strong>多线程的概念</strong> ：如果一个程序允许两个或两个以上的线程，那么它就是一个多线程程序。多线程是指在单个进程中运行多个线程；<br>\n<strong>多线程的作用</strong> ：<br>\n1.提高CPU的利用率（提高处理速度，避免无效等待，提高用户体验）；<br>\n2.便于编程建模（拆解任务，每个线程负责一个任务）；<br>\n3.摩尔定律失效，CPU性能很难提高，要求程序的并行化以提高性能；<br>\n<strong>多线程的局限</strong> ：<br>\n1.性能问题：上下文切换带来的消耗；<br>\n2.异构化任务很难高效并行；<br>\n3.线程安全问题：包括数据安全问题以及线程带来的活跃性问题；</p>\n<h2 id=\"1.3-串行、并行、并发\">1.3 串行、并行、并发<a title=\"#1.3-串行、并行、并发\" href=\"#1.3-串行、并行、并发\"></a></h2>\n<p><strong>并发</strong> ：<br>\n1.形容多个任务的执行状态：两个或多个任务可以在重叠的时间段内启动、运行和完成，即在一段时间内交替运行；<br>\n2.并发性的简称：<strong>并发性是程序并发和并行执行的前提条件</strong><br>\n，指程序不同的部分可以无序或同时执行，且不影响最终结果，在不同核心的计算机上表现不同（此时并行和并发不是同一维度上的）；<br>\n<strong>并行</strong> ：在同一时刻，有多个任务同时执行；<br>\n<img src=\"images/Java_Multithreading/1.png\" alt=\"\" loading=\"lazy\"><br>\n由上图可以看出<strong>并发是单处理器，逻辑上的同时运行</strong> ，<strong>并行是多处理器，物理上的同时运行</strong><br>\n，因此单处理器无法实现并行，且并行（多个线程同时执行）一定是并发</p>\n<h2 id=\"1.4-高并发\">1.4 高并发<a title=\"#1.4-高并发\" href=\"#1.4-高并发\"></a></h2>\n<p><strong>高并发</strong> 指有大量的请求同时到达服务端，而<strong>多线程</strong> 是为了防止高并发带来的一些线程安全和性能问题，即多线程是应对高并发场景的一种重要的解决方案；<br>\n高并发并不意味着是多线程，比如数据库中的高并发可以用Redis应对，而Redis的底层是单线程处理的；<br>\n高并发的指标：</p>\n<ul>\n<li>QPS(Queries Per Second)每秒查询数</li>\n<li>带宽</li>\n<li>PV(Page View)</li>\n<li>UV(Unique Visitor)</li>\n<li>IP</li>\n<li>并发连接数</li>\n<li>服务器平均请求等待时间</li>\n</ul>\n<h2 id=\"1.5-同步与异步、阻塞与非阻塞\">1.5 同步与异步、阻塞与非阻塞<a title=\"#1.5-同步与异步、阻塞与非阻塞\" href=\"#1.5-同步与异步、阻塞与非阻塞\"></a></h2>\n<p><strong>同步</strong> ：同步异步指的是被调用者(服务器)的行为，而不是请求方的行为，同步是指在得到结果之前，服务端不返回任何结果；<br>\n<strong>异步</strong> ：调用在发出之后，服务端会立刻返回，告诉调用方已收到请求；<br>\n<img src=\"images/Java_Multithreading/2.png\" alt=\"\" loading=\"lazy\"><br>\n<strong>阻塞与非阻塞</strong> ：调用者在调用一个东西之后，结果返回前是否可以做其他事；</p>\n<ul>\n<li>同步阻塞</li>\n<li>同步非阻塞</li>\n<li>异步阻塞</li>\n<li>异步非阻塞</li>\n</ul>\n<h1 id=\"2.线程的创建\">2.线程的创建<a title=\"#2.线程的创建\" href=\"#2.线程的创建\"></a></h1>\n<p>有三种方式创建线程：<br>\n<strong>1.继承Thread类：</strong><br>\n继承Thread类并重写run()方法，调用start开启线程，thread类就是实现了Runnable接口；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Learning.&quot;</span>+i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象  </span></span><br><span class=\"line\">        <span class=\"type\">TestThread</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();  </span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开启线程  </span></span><br><span class=\"line\">        test.start();  <span class=\"comment\">//调用run只有主线程一条路径，调用start才是多线程同时执行，由CPU调度  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;  </span><br><span class=\"line\">            System.out.prinltn(<span class=\"string\">&quot;Playing.&quot;</span>+i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><strong>2.实现Runnable接口：</strong><br>\n实现Runnable接口并重写run方法，执行线程需要放入Runnable接口的实现类，调用start方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Learning.&quot;</span>+i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//创建Runnable接口的实现类对象  </span></span><br><span class=\"line\">        <span class=\"type\">TestThread</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();  </span><br><span class=\"line\">        <span class=\"comment\">//创建线程对象，通过线程对象开启线程，代理  </span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(test);  </span><br><span class=\"line\">        <span class=\"comment\">//调用start()方法开启线程  </span></span><br><span class=\"line\">        thread.start();  </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;  </span><br><span class=\"line\">            System.out.prinltn(<span class=\"string\">&quot;Playing.&quot;</span>+i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><strong>因为Java是单继承的，所以推荐使用Runnable接口</strong> ；</p>\n<p><strong>3.实现Callable接口：</strong><br>\n可以定义返回值并抛出异常；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt;&#123;  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;  </span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Learning.&quot;</span>+i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"comment\">//main线程，主线程  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//创建callable接口的实现类对象  </span></span><br><span class=\"line\">        <span class=\"type\">TestThread</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TestThread</span>();  </span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务  </span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">ser</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"comment\">//提交任务  </span></span><br><span class=\"line\">        Future&lt;<span class=\"type\">boolean</span>&gt; r = ser.submit(test);  </span><br><span class=\"line\">        <span class=\"comment\">//获取执行结果  </span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> r.get();  </span><br><span class=\"line\">        <span class=\"comment\">//关闭服务  </span></span><br><span class=\"line\">        ser.shutdownNow();   </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;  </span><br><span class=\"line\">            System.out.prinltn(<span class=\"string\">&quot;Playing.&quot;</span>+i);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<h1 id=\"3.线程的状态与方法\">3.线程的状态与方法<a title=\"#3.线程的状态与方法\" href=\"#3.线程的状态与方法\"></a></h1>\n<p><strong>线程的5个状态：</strong><br>\n创建状态、就绪状态、阻塞状态、运行状态、死亡状态；<br>\n<strong>状态标记：</strong><br>\nNEW(线程尚未启动)<br>\nRUNNABLE(在JVM中执行的线程)<br>\nBLOCKED(被阻塞等待监视器锁定)<br>\nWAITING(正在等待另一个线程执行特定动作)<br>\nTIMED_WAITING(正在等待另一个线程执行动作到达指定等待时间)<br>\nTERMINATED(线程已退出)</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setPriority(int newPriority)</td>\n<td>更改线程优先级</td>\n</tr>\n<tr>\n<td>sleep(long millis)</td>\n<td>指定时间长度让线程休眠(毫秒)</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>合并线程，待此线程执行完再执行其他线程(插队)，其他线程阻塞</td>\n</tr>\n<tr>\n<td>yield()</td>\n<td>暂停当前正在执行的线程(礼让)，CPU重新调度(可能还是原线程执行)</td>\n</tr>\n<tr>\n<td>interrupt()</td>\n<td>中断线程(不建议使用)</td>\n</tr>\n<tr>\n<td>isAlive()</td>\n<td>测试线程是否处于活动状态</td>\n</tr>\n</tbody>\n</table></div></div><h1 id=\"4.线程优先级\">4.线程优先级<a title=\"#4.线程优先级\" href=\"#4.线程优先级\"></a></h1>\n<p>Java提供了一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行(优先级高调度的概率则高)；<br>\n线程优先级的范围是1~10：</p>\n<ul>\n<li>Thread.MIN_PRIORITY = 1;</li>\n<li>Thread.MAX_PRIORITY = 10;</li>\n<li>Thread.NORM_PRIORITY = 5;</li>\n</ul>\n<p>通过<code>getPriority()</code>获取线程优先级，<code>setPriority(int n)</code>改变线程优先级；</p>\n<h1 id=\"5.守护线程\">5.守护线程<a title=\"#5.守护线程\" href=\"#5.守护线程\"></a></h1>\n<p>线程分为<strong>用户线程</strong> 和<strong>守护(daemon)线程</strong><br>\n，虚拟机需要保证用户线程执行完毕，而不用等守护线程执行完毕，如后台操作日志，监控内存，垃圾回收等；</p>\n<h1 id=\"6.线程的同步\">6.线程的同步<a title=\"#6.线程的同步\" href=\"#6.线程的同步\"></a></h1>\n<p>处理多线程问题时，会出现多个线程访问同一个对象的情况，此时会出现线程不安全，数据紊乱，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ticket</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ticket&lt;=<span class=\"number\">0</span>) <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">200</span>);  <span class=\"comment\">//延时  </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span>(InterruptedException e)&#123;  </span><br><span class=\"line\">                e.printStackTrace();  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+ticket--);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(test,<span class=\"string\">&quot;A&quot;</span>).start();  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(test,<span class=\"string\">&quot;B&quot;</span>).start();  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(test,<span class=\"string\">&quot;C&quot;</span>).start();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>线程同步是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong><br>\n中形成队列，等前面的线程使用完毕，下一个线程再使用，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong><br>\n，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁，锁机制存在以下问题：</p>\n<ul>\n<li>一个线程持有锁会导致其他需要此锁的线程挂起；</li>\n<li>多线程竞争下，加锁、释放锁会导致较多的上下文切换和调度延时，引起性能问题；</li>\n<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级导致，引起性能问题；</li>\n</ul>\n<p>实现锁机制的synchronize关键字有两个用法：<strong>synchronize方法</strong> 和<strong>synchronize块</strong> ；<br>\nsynchronized方法控制对对象的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁；<br>\n除了synchronized外还有lock也可以实现锁机制；</p>\n<p>关于<strong>ArrayList线程不安全</strong> 的一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">unsafe</span>&#123;  </span><br><span class=\"line\">    List&lt;String&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  </span><br><span class=\"line\">            l.add(Thread.currentThread().getName());  <span class=\"comment\">//放入当前线程的名字  </span></span><br><span class=\"line\">        &#125;).start();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    System.out.println(l.size());  <span class=\"comment\">//小于10000  </span></span><br><span class=\"line\">    <span class=\"comment\">//因为有多个线程同时操作l  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>可以使用synchronize块使得上面的ArrayList线程同步：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">unsafe</span>&#123;  </span><br><span class=\"line\">    List&lt;String&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  </span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span>(l)&#123;  </span><br><span class=\"line\">                l.add(Thread.currentThread().getName());   </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;).start();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    System.out.println(l.size());  <span class=\"comment\">//等于10000  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p><code>java.util.concurrent</code>中的CopyOnWriteArrayList就是一个比较线程安全的容器；</p>\n<h1 id=\"7.死锁\">7.死锁<a title=\"#7.死锁\" href=\"#7.死锁\"></a></h1>\n<p>多个线程各自占有一些共享资源，并且相互等待其他线程占有的资源才能运行，导致两个或多个线程都在等待对方释放资源；某一个同步块同时拥有<strong>两个以上对象的锁</strong><br>\n时，就可能会发生死锁；</p>\n<h1 id=\"8.线程协作\">8.线程协作<a title=\"#8.线程协作\" href=\"#8.线程协作\"></a></h1>\n<p>Java中解决线程通信的几个方法(Object类的方法)：</p>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wait()</td>\n<td>表示线程会一直等待，直到其他线程通知，与sleep不同，会释放锁</td>\n</tr>\n<tr>\n<td>wait(long timeout)</td>\n<td>指定等待时间</td>\n</tr>\n<tr>\n<td>notify()</td>\n<td>唤醒一个处于等待的线程</td>\n</tr>\n<tr>\n<td>notifyAll()</td>\n<td>唤醒同一个对象上所有调用wait()的线程，按优先级调度</td>\n</tr>\n</tbody>\n</table></div></div><h1 id=\"9.线程池\">9.线程池<a title=\"#9.线程池\" href=\"#9.线程池\"></a></h1>\n<p>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影象很大，可以提前创建多个线程，放入<strong>线程池</strong><br>\n中，使用时直接获取，使用完放回，可以避免频繁创建和销毁，实现重复利用，好处是提高响应速度、降低资源消耗、便于线程管理；</p>\n","prev":{"title":"Java集合-初读HashMap源码","link":"2020/04/29/blog/Java_HashMap"},"next":{"title":"数据结构：排序算法总结","link":"2020/04/23/blog/Sort_Algorithm"},"plink":"https://qfzack.github.io/2020/04/27/blog/Java_Multithreading/","toc":[{"id":"1.基本概念","title":"1.基本概念","index":"1","children":[{"id":"1.1-线程与进程","title":"1.1 线程与进程","index":"1.1"},{"id":"1.2-多线程","title":"1.2 多线程","index":"1.2"},{"id":"1.3-串行、并行、并发","title":"1.3 串行、并行、并发","index":"1.3"},{"id":"1.4-高并发","title":"1.4 高并发","index":"1.4"},{"id":"1.5-同步与异步、阻塞与非阻塞","title":"1.5 同步与异步、阻塞与非阻塞","index":"1.5"}]},{"id":"2.线程的创建","title":"2.线程的创建","index":"2"},{"id":"3.线程的状态与方法","title":"3.线程的状态与方法","index":"3"},{"id":"4.线程优先级","title":"4.线程优先级","index":"4"},{"id":"5.守护线程","title":"5.守护线程","index":"5"},{"id":"6.线程的同步","title":"6.线程的同步","index":"6"},{"id":"7.死锁","title":"7.死锁","index":"7"},{"id":"8.线程协作","title":"8.线程协作","index":"8"},{"id":"9.线程池","title":"9.线程池","index":"9"}],"reading_time":"2925 words in 20 min"}