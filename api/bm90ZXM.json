{"title":"","date":"2025-04-13T16:30:32.761Z","date_formatted":{"ll":"Apr 13, 2025","L":"04/13/2025","MM-DD":"04-13"},"updated":"2025-04-13T08:30:32.761Z","content":"<blockquote>\n<p><strong>A notebook for some basic enviroment configuration in WSL2 (Ubuntu).</strong></p>\n</blockquote>\n<h1 id=\"wsl\"><strong>WSL</strong><a title=\"#wsl\" href=\"#wsl\"></a></h1>\n<ul>\n<li>windows subsystem for linux</li>\n<li>先在softcenter安装wsl</li>\n<li>在MS store安装ubuntu，或者powershell执行<code>wsl --install -d ubuntu</code></li>\n<li>安装完启动即可</li>\n</ul>\n<blockquote>\n<p>踩坑：第一次安装完vscode无法连接wsl，于是卸载，卸载之后就再也安装不上了<br>\n解决：申请了临时管理员权限，升级wsl lunux内核，wsl --update，然后就可以了</p>\n</blockquote>\n<ul>\n<li>配合vscode使用：\n<ul>\n<li>安装插件remote-wsl</li>\n<li>在ubuntu中创建文件夹，然后可以打开跳转到vscode，<code>mkdir dir</code>，<code>code dir</code></li>\n<li>vscode也自动连接上了wsl，可以在wsl ubuntu中进行开发了</li>\n<li>本地安装的vscode在wsl中的路径是<code>/mnt/c/Users/Qingfeng_Zhang/AppData/Local/Programs/Microsoft VS Code</code></li>\n<li>当出现command not found: code时：\n<ul>\n<li>先找到code的位置：<code>sudo find /mnt/c/ -name &quot;code&quot; -type f 2&gt;/dev/null</code></li>\n<li>创建软连接：<code>sudo ln -s /mnt/c/Users/Qingfeng_Zhang/AppData/Local/Programs/Microsoft\\ VS\\ Code/bin/code /usr/local/bin/code</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"golang\"><strong>Golang</strong><a title=\"#golang\" href=\"#golang\"></a></h1>\n<h2 id=\"installation\">installation<a title=\"#installation\" href=\"#installation\"></a></h2>\n<ul>\n<li>apt-get只能下载13版本的go，有点太旧了</li>\n<li>下载go：<code>wget https://go.dev/dl/go1.21.3.linux-amd64.tar.gz --no-check-certificate</code></li>\n<li>使用<code>tar -xzvf ./golang -zxvf go1.21.3.linux-amd64.tar.gz</code>解压文件，然后配置环境变量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GO111MODULE=on</span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOROOT=/home/qingfeng_zhang/golang/go</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOROOT</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> GOPATH=/home/qingfeng_zhang/golang/gopath</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>vscode安装go插件，然后ctrl+shift+p搜索go: install安装go tools</li>\n</ul>\n<h2 id=\"version-management\">version management<a title=\"#version-management\" href=\"#version-management\"></a></h2>\n<ul>\n<li>install gvm refer to</li>\n</ul>\n<p><a href=\"https://github.com/moovweb/gvm\" target=\"_blank\">https://github.com/moovweb/gvm</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt-get install bison</span><br><span class=\"line\">bash &lt; &lt;(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>install go1.20</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gvm install go1.20</span><br><span class=\"line\">gvm list</span><br><span class=\"line\">gvm use</span><br></pre></td></tr></table></figure>\n<h1 id=\"nodejs\"><strong>Nodejs</strong><a title=\"#nodejs\" href=\"#nodejs\"></a></h1>\n<ul>\n<li><code>wget https://registry.npmmirror.com/-/binary/node/v20.13.0/node-v20.13.0-linux-x64.tar.xz</code>注意版本</li>\n<li><code>tar -xvf node-v20.13.0-linux-x64.tar.xz</code></li>\n<li>设置node和npm的软连接，注意路径是否正确:\n<ul>\n<li><code>sudo ln -s /home/qingfeng_zhang/app/node-v20.13.0-linux-x64/bin/node /usr/local/bin/</code></li>\n<li><code>sudo ln -s /home/qingfeng_zhang/app/node-v20.13.0-linux-x64/bin/npm /usr/local/bin/</code></li>\n</ul>\n</li>\n<li>更换node版本：\n<ul>\n<li>安装n模块：<code>npm install -g n</code></li>\n<li>升级到最新的稳定版本：<code>n stable</code></li>\n<li>也可以安装指定版本<code>n v14.17.5</code>，如果找不到n则进入到对应的安装目录执行</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"python\"><strong>Python</strong><a title=\"#python\" href=\"#python\"></a></h1>\n<ul>\n<li>version management with pyenv</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L &lt;https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer&gt; | bash</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$HOME/.pyenv/bin:$PATH</span><br><span class=\"line\">eval &quot;$(pyenv init -)&quot;</span><br><span class=\"line\">eval &quot;$(pyenv virtualenv-init -)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">pyenv install 3.11</span><br><span class=\"line\">pyenv versions</span><br><span class=\"line\">pyenv global 3.11</span><br></pre></td></tr></table></figure>\n<h1 id=\"java\"><strong>Java</strong><a title=\"#java\" href=\"#java\"></a></h1>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu\" target=\"_blank\">https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu</a></li>\n</ul>\n<h1 id=\"docker\"><strong>Docker</strong><a title=\"#docker\" href=\"#docker\"></a></h1>\n<h2 id=\"installation-1\">Installation<a title=\"#installation-1\" href=\"#installation-1\"></a></h2>\n<ul>\n<li>docker可以安装在windows上，这里选择安装在wsl(ubuntu)上</li>\n<li>Refer to guideline  <a href=\"https://docs.docker.com/engine/install/ubuntu/#install-using-the-convenience-script\" target=\"_blank\">https://docs.docker.com/engine/install/ubuntu/#install-using-the-convenience-script</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install docker</span></span><br><span class=\"line\">curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> sh get-docker.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># start docker daemon</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> service docker start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># fix non-root user can not connect to docker daemon</span></span><br><span class=\"line\"><span class=\"comment\"># https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> groupadd docker</span><br><span class=\"line\"><span class=\"built_in\">sudo</span> usermod -aG docker <span class=\"variable\">$&#123;USER&#125;</span></span><br><span class=\"line\">su -s <span class=\"variable\">$&#123;USER&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># configure ca cert</span></span><br><span class=\"line\">wget --no-check-certificate  https://amaas-eos-drm1.cec.lab.emc.com/artifactory/vxrail-binaries-virtual/certs/EMC_CA_ROOT.crt -O /usr/local/share/ca-certificates/EMC_CA_ROOT.crt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># restart docker daemon</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> service docker restart</span><br></pre></td></tr></table></figure>\n<h2 id=\"build-image\">Build Image<a title=\"#build-image\" href=\"#build-image\"></a></h2>\n<ul>\n<li>build with docker file Dockerfile.python3.11 in current dir</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t amaas-eos-drm1.cec.lab.emc.com:5033/vxraildevops/ci/blackduck-drp-scanner:python3.11 -f Dockerfile.python3.11 .</span><br></pre></td></tr></table></figure>\n<ul>\n<li>push to image hub</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker push amaas-eos-drm1.cec.lab.emc.com:5033/vxraildevops/ci/blackduck-drp-scanner:python3.11</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"redis-container\">Redis Container<a title=\"#redis-container\" href=\"#redis-container\"></a></h2>\n<ul>\n<li>docker hub查询可用的docker镜像<code>docker search redis</code></li>\n<li>报错，修改docker镜像地址：<code>sudo vim /etc/docker/daemon.json</code></li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;registry-mirrors&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&lt;https://dftbcros.mirror.aliyuncs.com&gt;&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启docker服务<code>systemctl restart docker</code>，继续pull将镜像拉到本地</li>\n<li>根据docker镜像创建docker容器：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 6379:6379 -v /home/mystic/Containers/data:/data -d redis redis-server --appendonly yes</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>-p：将主机(VDI)的端口映射到容器的端口<br>\n-v：将主机的指定目录挂载到容器的指定目录下<br>\nredis-server --appendonly yes：在容器中执行redis-server启动服务，并开启redis持久化</p>\n</blockquote>\n<ul>\n<li>进入docker容器中<code>docker exec -it 95 bash</code></li>\n</ul>\n<h1 id=\"jenkins\"><strong>Jenkins</strong><a title=\"#jenkins\" href=\"#jenkins\"></a></h1>\n<ul>\n<li>以docker容器的方式启动jenkins，因为原来使用的jenkins版本是2.263.4，因此拉取相同版本的镜像</li>\n<li>添加一个本地的挂载目录<code>/var/jenkins_mount</code>，给777权限，方便查看容器中的配置文件</li>\n<li>创建docker容器：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 9000:8080 -p 50000:50000 -v /var/jenkins_mount:/var/jenkins_home -v /etc/localtime:/etc/localtime --name jenkins-2.263.4 jenkins/jenkins:2.263.4</span><br></pre></td></tr></table></figure>\n<h1 id=\"python-1\"><strong>Python</strong><a title=\"#python-1\" href=\"#python-1\"></a></h1>\n<h2 id=\"install-anaconda\">Install Anaconda<a title=\"#install-anaconda\" href=\"#install-anaconda\"></a></h2>\n<ul>\n<li>下载Anaconda的安装文件Anaconda3-2021.05-Linux-x86_64.sh：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -O &lt;url&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>安装Anaconda：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x Anaconda3-2023.03-1-Linux-x86_64.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./Anaconda3-2023.03-1-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"create-python-env\">Create Python Env<a title=\"#create-python-env\" href=\"#create-python-env\"></a></h2>\n<ul>\n<li>使用conda创建python3.10的环境：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create --name python3.10 python=3.10</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果出现SSL证书的错误，先忽略SSL认证：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda config --set ssl_verify no</span><br></pre></td></tr></table></figure>\n<h2 id=\"version-control\">Version Control<a title=\"#version-control\" href=\"#version-control\"></a></h2>\n<ul>\n<li>查看已安装的环境：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda info --envs</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用指定的环境：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda activate python3.10</span><br></pre></td></tr></table></figure>\n<h1 id=\"groovy\"><strong>Groovy</strong><a title=\"#groovy\" href=\"#groovy\"></a></h1>\n<ul>\n<li>refer to <a href=\"https://groovy-lang.org/install.html\" target=\"_blank\">https://groovy-lang.org/install.html</a> to install</li>\n<li>install java</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install default-jre</span><br><span class=\"line\">apt install default-jdk</span><br></pre></td></tr></table></figure>\n<ul>\n<li>config JAVA_HOME</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"zsh\"><strong>zsh</strong><a title=\"#zsh\" href=\"#zsh\"></a></h1>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install zsh</span><br><span class=\"line\">chsh -s /bin/zsh</span><br><span class=\"line\"></span><br><span class=\"line\">sh -c &quot;$(curl -fsSL &lt;https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh&gt;)&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>suggest theme: <code>ys</code></li>\n</ul>\n<h1 id=\"git\"><strong>Git</strong><a title=\"#git\" href=\"#git\"></a></h1>\n<ul>\n<li>一般是先把原始的repo fork为自己的repo，然后clone自己的repo进行开发，开发完提交到远程repo，然后再pull request到原始repo上\n<ul>\n<li>upstream repo：原始repo</li>\n<li>远程repo：从原始repo fork过来的</li>\n<li>本地repo：从远程repo clone下来的</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"configuration\">Configuration<a title=\"#configuration\" href=\"#configuration\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &lt;username&gt;</span><br><span class=\"line\">git config --global user.email &lt;email&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">ssh-keygen -t rsa -C &lt;email&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>configure multi RSA</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &lt;email&gt; -f &quot;~/.ssh/id_rsa_personal&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"git-workflow\">Git Workflow<a title=\"#git-workflow\" href=\"#git-workflow\"></a></h2>\n<ol>\n<li>fork repo</li>\n<li>clone repo</li>\n<li><code>git remote add upstream &lt;https://eos2git.cec.lab.emc.com/vxrail/poxio.git</code>&gt;\n<ul>\n<li><code>git remote -v</code>查看远程仓库，没有连接upstream之前就只有origin</li>\n<li>连接upstream之后可以看到有upstream</li>\n<li>然后可以从upstream repo拉去最新的改动：<code>git fetch upstream</code>（习惯使用<code>git pull upstream master --rebase</code>）</li>\n</ul>\n</li>\n<li><code>git checkout -b feature/poxio-ui/select-option</code>\n<ul>\n<li>切换到本地分支进行开发</li>\n</ul>\n</li>\n<li><code>git commit -am &quot;comment&quot;</code>\n<ul>\n<li>将分支提交到本地仓库</li>\n<li>配置commit模板之后就可以<code>git commit -a</code>提交所有变动，然后进入commit信息编辑页面</li>\n</ul>\n</li>\n<li><code>git push origin feature/poxio-ui/select-option</code>\n<ul>\n<li>将分支推送到远程origin</li>\n</ul>\n</li>\n<li><code>git log</code>\n<ul>\n<li>查看commit历史</li>\n</ul>\n</li>\n<li><code>git rebase -i HEAD~3</code>\n<ul>\n<li>如果branch里有多条commit记录，就合并为一条</li>\n</ul>\n</li>\n<li><code>git pull upstream master --rebase</code>\n<ul>\n<li>从upstream拉去更新，且不产生新的commit记录</li>\n</ul>\n</li>\n<li>submit pull request</li>\n<li>PR is reviewed and merged</li>\n</ol>\n<h2 id=\"common-operation\">Common Operation<a title=\"#common-operation\" href=\"#common-operation\"></a></h2>\n<ul>\n<li>\n<p><strong>修改branch name</strong></p>\n<ul>\n<li><code>git branch -m oldName newName</code></li>\n<li>如果已经推送到远程删除远程分支<code>git push --delete origin oldName</code>再推送</li>\n<li>推送新分支<code>git push origin newName</code></li>\n<li>将本地分支与远程分支关联<code>git branch --set-upstream-to origin/newName</code></li>\n</ul>\n</li>\n<li>\n<p><strong>配置commit模板</strong></p>\n<ul>\n<li><a href=\"https://eos2git.cec.lab.emc.com/vxrail/poxio/blob/master/.github/template_guide.md\" target=\"_blank\">https://eos2git.cec.lab.emc.com/vxrail/poxio/blob/master/.github/template_guide.md</a></li>\n<li><code>git config --global commit.template ../commit_template.txt</code></li>\n</ul>\n</li>\n<li>\n<p><strong>rebase合并commit</strong></p>\n<ul>\n<li><a href=\"https://juejin.cn/post/6844903600976576519\" target=\"_blank\">https://juejin.cn/post/6844903600976576519</a></li>\n<li><code>git log</code>查看提交历史</li>\n<li><code>git rebase -i HEAD~3</code> 编辑前三条commit</li>\n<li>进入到编辑界面：将<code>pick</code>修改为<code>squash</code>或<code>s</code>，表示和前一个commit进行合并</li>\n<li>保存退出之后会编辑commit信息，编辑完保存即可</li>\n</ul>\n</li>\n<li>\n<p><strong>分支创建与合并</strong></p>\n<ul>\n<li><code>git checkout -b new_branch</code>创建并切换到此分支</li>\n<li><code>git merge new_branch</code>将new_branch的变更合并到当前分支上</li>\n</ul>\n</li>\n<li>\n<p><strong>删除本地和远程分支</strong></p>\n</li>\n<li>\n<p><code>git branch -d branch_name</code></p>\n</li>\n<li>\n<p><code>git push origin --delete branch_name</code></p>\n</li>\n<li>\n<p><strong>修改commit信息</strong></p>\n<ul>\n<li><code>git commit --amend</code></li>\n</ul>\n</li>\n<li>\n<p><strong>tag为repo加标签</strong></p>\n<ul>\n<li><code>git tag -l &quot;v1.0.*&quot;</code></li>\n<li><code>git tag -a v1.0.0 -m &quot;comment&quot;</code></li>\n<li><code>git tag -a v1.0.0 &lt;commit_hash&gt;</code></li>\n<li><code>git tag v1.0.0 -n &quot;comment&quot;</code></li>\n<li><code>git tag -d v1.0.0</code></li>\n<li><code>git push origin v1.0.0</code></li>\n</ul>\n</li>\n<li>\n<p><strong>local切换upstream的branch</strong></p>\n<ul>\n<li><code>git fetch upstream</code></li>\n<li><code>git branch -a</code></li>\n<li><code>git checkout -b &lt;branch_name&gt; upstream/&lt;branch_name&gt;</code></li>\n<li><code>git branch -vv</code></li>\n</ul>\n</li>\n<li>\n<p><strong>stash暂存修改</strong></p>\n<ul>\n<li><code>git stash save &quot;stash-info&quot;</code> 保存当前的修改</li>\n<li><code>git stash list</code> 查看stash列表</li>\n<li><code>git stash apply 0</code> 使用指定的stash</li>\n<li><code>git stash drop 0</code> 删除指定的stash</li>\n<li><code>git stash show 0 -p</code> 查看指定stash内容</li>\n</ul>\n</li>\n<li>\n<p>使用HTTPS时禁用SSL验证：</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -c http.sslVerify=false &lt;Repo_URL&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"docker-container\"><strong>Docker Container</strong><a title=\"#docker-container\" href=\"#docker-container\"></a></h1>\n<h2 id=\"postgres\">Postgres<a title=\"#postgres\" href=\"#postgres\"></a></h2>\n<ul>\n<li>docker启动postgres：\n<ul>\n<li>拉去postgres镜像：<code>docker pull bitnami/postgresql</code></li>\n<li>启动docker容器：<code>docker run --name postgres -e POSTGRES_PASSWORD=postgrespw -p 5432:5432 -d bitnami/postgresql</code></li>\n<li>进入容器：<code>docker exec -it &lt;imageID&gt; /bin/bash</code></li>\n<li>进入postgres：<code>psql -U postgres</code></li>\n</ul>\n</li>\n<li>docker启动postgres客户端pgadmin4：\n<ul>\n<li>拉去pgadmin镜像：<code>docker pull dpage/pgadmin4</code></li>\n<li>启动docker容器：<code>docker run -p 5050:80 -e 'PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org' -e 'PGADMIN_DEFAULT_PASSWORD=admin' -d --name pgadmin4 dpage/pgadmin4</code></li>\n</ul>\n</li>\n<li>常用命令：\n<ul>\n<li>查看当前数据库：<code>select current_database();</code>或者<code>\\l</code></li>\n<li>创建数据库：<code>CREATE DATABASE dbname;</code></li>\n<li>进入数据库：<code>\\c dbName</code></li>\n<li>查看当前用户：<code>select user;</code>or <code>\\du</code></li>\n<li>查看所有数据表：<code>\\d</code></li>\n</ul>\n</li>\n<li>wsl启动的postgres：\n<ul>\n<li>name: postgres</li>\n<li>password: postgrespw</li>\n</ul>\n</li>\n<li>data dump and restore:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pg_dump -U postgres -t ingested_commits -f /devequ-snapshoot/ingested_commits.sql poxio_datalake</span><br><span class=\"line\">psql -h 127.0.0.1 -p 5432 -U postgres -d poxio_datalake -f /devequ-snapshoot/ingested_commits.sql</span><br></pre></td></tr></table></figure>\n<h2 id=\"mongodb\">Mongodb<a title=\"#mongodb\" href=\"#mongodb\"></a></h2>\n<ul>\n<li>docker启动mongodb：\n<ul>\n<li>拉取mongo的镜像：<code>docker pull amaas-eos-drm1.cec.lab.emc.com:5033/vxraildevops/mongo:4.2.7</code></li>\n<li>启动docker容器：<code>docker run --name mongodb -p 27017:27017 -d mongo</code></li>\n<li>进入容器：<code>docker exec -it mongo /bin/bash</code></li>\n<li>进入mongo：<code>mongo -u &lt;userName&gt; -p</code></li>\n</ul>\n</li>\n<li>常用命令：\n<ul>\n<li>查询数据库：<code>show dbs</code></li>\n<li>查看当前数据库：<code>&lt;dbName&gt;</code></li>\n<li>切换数据库：<code>use &lt;dbName&gt;</code></li>\n<li>查看collections：<code>show collections</code></li>\n</ul>\n</li>\n<li>使用k8s中的mongo：\n<ul>\n<li><code>kubectl exec -i -t -n mongodb-cluster-prod deep-mongodb-cluster-prod-0 -c mongod -- sh -c &quot;(bash || ash || sh)&quot;</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 查询文档</span><br><span class=\"line\">db.getCollection(&#x27;commit&#x27;).find(&#123;&quot;repo&quot;: &quot;nano-service&quot;,&quot;ntId&quot;:&#123;$exists: false&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 查询数量</span><br><span class=\"line\">db.getCollection(&#x27;commit&#x27;).count(&#123;&quot;repo&quot;: &quot;nano-service&quot;,&quot;ntId&quot;:&#123;$exists: false&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新文档的字段</span><br><span class=\"line\">db.getCollection(&#x27;commit&#x27;).update(&#123;&quot;repo&quot;: &quot;nano-service&quot;&#125;,&#123; $set: &#123; &quot;workItemProject&quot;: &quot;&quot; &#125; &#125;)</span><br><span class=\"line\">db.getCollection(&#x27;commit&#x27;).updateMany(&#123;&quot;repo&quot;: &quot;nano-service&quot;&#125;,&#123; $set: &#123; &quot;workItemProject&quot;: &quot;&quot; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除文档的字段</span><br><span class=\"line\">db.getCollection(&#x27;commit&#x27;).update(&#123;&quot;repo&quot;: &quot;nano-service&quot;&#125;,&#123; $unset: &#123; &quot;ntId&quot;: &quot;&quot; &#125; &#125;)</span><br><span class=\"line\">db.getCollection(&#x27;commit&#x27;).updateMany(&#123;&quot;repo&quot;: &quot;nano-service&quot;&#125;,&#123; $unset: &#123; &quot;ntId&quot;: &quot;&quot; &#125; &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//判断字段存在</span><br><span class=\"line\">&quot;ntId&quot;:&#123;$exists: false&#125;</span><br><span class=\"line\">//判断字段等于&quot;&quot;</span><br><span class=\"line\">&quot;workItemKey&quot;:&#123;$eq: &quot;&quot;&#125;</span><br><span class=\"line\">//判断字段不等于&quot;&quot;</span><br><span class=\"line\">&quot;workItemKey&quot;:&#123;$ne: &quot;&quot;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"redis\">Redis<a title=\"#redis\" href=\"#redis\"></a></h2>\n<ul>\n<li>docker pull and run Redis image</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull redis</span><br><span class=\"line\">docker run --name redis -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用redis cli连接redis服务</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-cli -h &lt;ip-address&gt; -p &lt;port&gt;    </span><br></pre></td></tr></table></figure>\n<h2 id=\"grafana\">Grafana<a title=\"#grafana\" href=\"#grafana\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull grafana/grafana</span><br><span class=\"line\">docker run --name grafana -p 3000:3000 -d grafana/grafana:latest</span><br></pre></td></tr></table></figure>\n<h2 id=\"prometheus\">Prometheus<a title=\"#prometheus\" href=\"#prometheus\"></a></h2>\n<ul>\n<li>启动node-exporter</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull prom/node-exporter</span><br><span class=\"line\">docker run --name node-exporter -p 9100:9100 -v &quot;/proc:/host/proc:ro&quot; -v &quot;/sys:/host/sys:ro&quot; -v &quot;/:/rootfs:ro&quot; -d prom/node-exporter</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建配置文件<code>/opt/prometheus/prometheus.yml</code>:</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\">  <span class=\"attr\">scrape_interval:</span>     <span class=\"string\">60s</span></span><br><span class=\"line\">  <span class=\"attr\">evaluation_interval:</span> <span class=\"string\">60s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:9090&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">instance:</span> <span class=\"string\">prometheus</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">linux</span></span><br><span class=\"line\">    <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;127.0.0.1:9100&#x27;</span>]</span><br><span class=\"line\">        <span class=\"attr\">labels:</span></span><br><span class=\"line\">          <span class=\"attr\">instance:</span> <span class=\"string\">localhost</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动prometheus</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull bitnami/prometheus</span><br><span class=\"line\"></span><br><span class=\"line\">docker run --name prometheus  -d \\\\</span><br><span class=\"line\">    -p 9090:9090 \\\\</span><br><span class=\"line\">    -v /opt/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  \\\\</span><br><span class=\"line\">    bitnami/prometheus</span><br></pre></td></tr></table></figure>\n<ul>\n<li>config file path:\n<ul>\n<li><code>\\\\\\\\wsl.localhost\\\\Ubuntu\\\\home\\\\qingfeng_zhang\\\\wsl_project\\\\vxrail-docker-library\\\\projects\\\\_\\\\vxraildevops\\\\prometheus\\\\deploy\\\\etc\\\\prometheus.yml</code></li>\n<li>/etc/prometheus/prometheus.yml</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"kubernetes\"><strong>Kubernetes</strong><a title=\"#kubernetes\" href=\"#kubernetes\"></a></h1>\n<h2 id=\"minikube\">minikube<a title=\"#minikube\" href=\"#minikube\"></a></h2>\n<ul>\n<li>安装minikube - <a href=\"https://minikube.sigs.k8s.io/docs/start/\" target=\"_blank\">https://minikube.sigs.k8s.io/docs/start/</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -LO &lt;https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64&gt;</span><br><span class=\"line\">sudo install minikube-linux-amd64 /usr/local/bin/minikube</span><br></pre></td></tr></table></figure>\n<h2 id=\"kubectl\">kubectl<a title=\"#kubectl\" href=\"#kubectl\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get events  #查看集群事件</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获取pods信息</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pods</span><br><span class=\"line\">kubectl get pods --all-namespaces</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">获取pod详细信息</span></span><br><span class=\"line\">kubectl get pods -o wide</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">获取yaml格式的资源配置</span></span><br><span class=\"line\">kubectl get po &lt;podname&gt; -o yaml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建资源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create deployment my-deployment --image=imageName  #创建deployment</span><br><span class=\"line\">kubectl expose deployment my-deployment --type=LoadBalancer --port=8080  #创建service，将pod暴露给公网</span><br><span class=\"line\">kubectl apply -f config.yaml  #根据yaml配置文件创建或更新资源</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除资源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl delete pod pod-name  #删除pod</span><br><span class=\"line\">kubectl delete pod pod-name -n namespace</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl delete service serviceName  #删除service</span><br><span class=\"line\">kubectl delete deployment deploymentName  #删除deployment</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl delete pod &lt;pod-name&gt; -n merico-prod --force --grace-period=0  #强制删除</span><br></pre></td></tr></table></figure>\n<ul>\n<li>describe</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl describe nodes my-node  #查看node的详细信息</span><br><span class=\"line\">kubectl describe pods my-node  #查看pod的详细信息</span><br></pre></td></tr></table></figure>\n<ul>\n<li>扩容</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl scale deployment my-deployment --replicas=0</span><br><span class=\"line\">kubectl scale deployment my-deployment --replicas=1 -n namespace</span><br></pre></td></tr></table></figure>\n<ul>\n<li>pod日志</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl logs podName</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl set image -n nameSpace deployment/my-deployment my-deployment=imageName  #修改deployment的image,可选image,resources,selector,subject</span><br></pre></td></tr></table></figure>\n<ul>\n<li>清理无效的pod</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl delete pods --field-selector=status.phase=Failed</span><br></pre></td></tr></table></figure>\n<h2 id=\"helm\">helm<a title=\"#helm\" href=\"#helm\"></a></h2>\n<ul>\n<li>chart代表helm包</li>\n<li>repository用来存放和共享chart</li>\n<li>release是运行在kubernetes中的chart实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget &lt;https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xvf  helm-v3.12.0-linux-amd64.tar.gz</span><br><span class=\"line\">sudo mv linux-amd64  /usr/local/bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"k9s\">K9s<a title=\"#k9s\" href=\"#k9s\"></a></h2>\n<ul>\n<li>k8s管理工具，类似Lens，但是是命令行使用的</li>\n<li>install:</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget &lt;https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_amd64.tar.gz&gt;</span><br><span class=\"line\">tar -zxf k9s_Linux_amd64.tar.gz -C /usr/local/bin</span><br></pre></td></tr></table></figure>\n<h2 id=\"ocp-tool\">OCP tool<a title=\"#ocp-tool\" href=\"#ocp-tool\"></a></h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/bin &amp;&amp; cd ~/bin</span><br><span class=\"line\">curl -kO https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/4.13.8/openshift-client-linux.tar.gz</span><br><span class=\"line\">tar xzvf openshift-client-linux.tar.gz</span><br><span class=\"line\">rm openshift-client-linux.tar.gz</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">rm</span> kubectl <span class=\"keyword\">if</span> you don<span class=\"string\">&#x27;t want the kubectl that comes with oc</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"swagger\"><strong>Swagger</strong><a title=\"#swagger\" href=\"#swagger\"></a></h1>\n<ul>\n<li>swagger tools in golang is swaggo</li>\n<li><a href=\"https://github.com/swaggo/swag/blob/master/README_zh-CN.md\" target=\"_blank\">https://github.com/swaggo/swag/blob/master/README_zh-CN.md</a></li>\n<li>update swagger docs</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swag init -g hooks.go -d ./internal/pkg/api-machinery/api/v3/hooks -o ./api/api-machinery/docs --parseDependency true</span><br></pre></td></tr></table></figure>\n<h1 id=\"sonarqube\"><strong>Sonarqube</strong><a title=\"#sonarqube\" href=\"#sonarqube\"></a></h1>\n<h2 id=\"sonar-scan\">sonar scan<a title=\"#sonar-scan\" href=\"#sonar-scan\"></a></h2>\n<ul>\n<li>install path: <code>/opt/sonar-scanner</code></li>\n<li>test with local sonar cli</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sonar-scanner \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.host.url=&#123;sonar_server&#125;&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.projectKey=&#123;project_key&#125;&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.projectName=&#123;project_name&#125;&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.sources=.&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.tests=.&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.test.inclusions=**/*_test.go&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.go.coverage.reportPaths=../coverage.out&#x27; \\\\</span><br><span class=\"line\">    &#x27;-Dsonar.go.tests.reportPaths=report.xml&#x27;</span><br></pre></td></tr></table></figure>\n<h1 id=\"minio\"><strong>MinIO</strong><a title=\"#minio\" href=\"#minio\"></a></h1>\n<ul>\n<li>MinIO is an object storage solution that provide an Amazon web service S3-compatible API and supports all core S3 feature</li>\n<li><code>mc</code> commandline tool is built to operate Minio</li>\n<li>install: <a href=\"https://min.io/docs/minio/linux/reference/minio-mc.html#install-mc\" target=\"_blank\">https://min.io/docs/minio/linux/reference/minio-mc.html#install-mc</a></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &lt;https://dl.min.io/client/mc/release/linux-amd64/mc&gt; \\\\</span><br><span class=\"line\">  --create-dirs \\\\</span><br><span class=\"line\">  -o $HOME/minio-binaries/mc</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x $HOME/minio-binaries/mc</span><br><span class=\"line\">export PATH=$PATH:$HOME/minio-binaries/</span><br></pre></td></tr></table></figure>\n<ul>\n<li>create alias for minio service</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc alias set swarm-minio &lt;http://rduvxrbldprd001.isus.emc.com:8080&gt; kkhQ40VmQGwq1zzf M8ciRJfBTZSHf5EApMagFo0zLbBNvQBU</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>usage</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc ls swarm-minio                     #list buckets in minio</span><br><span class=\"line\">mc ls swarm-minio/deep-merico-backup  #list buckets objects in minio</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mc rm --recursive &lt;ALIAS&gt;/&lt;BUCKET&gt;/&lt;FOLDER&gt; --force --versions #force delete all version folder and files recursively</span><br></pre></td></tr></table></figure>\n<h1 id=\"ocp-cluster\"><strong>OCP Cluster</strong><a title=\"#ocp-cluster\" href=\"#ocp-cluster\"></a></h1>\n<ul>\n<li>Ingress: *.nginx.demo-partners.k8s.cec.delllabs.net</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oc login -u &lt;login_id&gt; -p &lt;password&gt; api.demo-partners.k8s.cec.delllabs.net:6443</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oc login --token=sha256~AlCjDxGwmfYTMS-1_jYXevKCKwEQNT0Zb-ld42RIKEw --server=https://api.primarystorage-stage-drm.k8s.cec.delllabs.net:6443</span><br><span class=\"line\">oc projects</span><br></pre></td></tr></table></figure>\n","link":"notes","plink":"https://github.com/qfzack/notes/","toc":[{"id":"wsl","title":"WSL","index":"1"},{"id":"golang","title":"Golang","index":"2","children":[{"id":"installation","title":"installation","index":"2.1"},{"id":"version-management","title":"version management","index":"2.2"}]},{"id":"nodejs","title":"Nodejs","index":"3"},{"id":"python","title":"Python","index":"4"},{"id":"java","title":"Java","index":"5"},{"id":"docker","title":"Docker","index":"6","children":[{"id":"installation-1","title":"Installation","index":"6.1"},{"id":"build-image","title":"Build Image","index":"6.2"},{"id":"redis-container","title":"Redis Container","index":"6.3"}]},{"id":"jenkins","title":"Jenkins","index":"7"},{"id":"python-1","title":"Python","index":"8","children":[{"id":"install-anaconda","title":"Install Anaconda","index":"8.1"},{"id":"create-python-env","title":"Create Python Env","index":"8.2"},{"id":"version-control","title":"Version Control","index":"8.3"}]},{"id":"groovy","title":"Groovy","index":"9"},{"id":"zsh","title":"zsh","index":"10"},{"id":"git","title":"Git","index":"11","children":[{"id":"configuration","title":"Configuration","index":"11.1"},{"id":"git-workflow","title":"Git Workflow","index":"11.2"},{"id":"common-operation","title":"Common Operation","index":"11.3"}]},{"id":"docker-container","title":"Docker Container","index":"12","children":[{"id":"postgres","title":"Postgres","index":"12.1"},{"id":"mongodb","title":"Mongodb","index":"12.2"},{"id":"redis","title":"Redis","index":"12.3"},{"id":"grafana","title":"Grafana","index":"12.4"},{"id":"prometheus","title":"Prometheus","index":"12.5"}]},{"id":"kubernetes","title":"Kubernetes","index":"13","children":[{"id":"minikube","title":"minikube","index":"13.1"},{"id":"kubectl","title":"kubectl","index":"13.2"},{"id":"helm","title":"helm","index":"13.3"},{"id":"k9s","title":"K9s","index":"13.4"},{"id":"ocp-tool","title":"OCP tool","index":"13.5"}]},{"id":"swagger","title":"Swagger","index":"14"},{"id":"sonarqube","title":"Sonarqube","index":"15","children":[{"id":"sonar-scan","title":"sonar scan","index":"15.1"}]},{"id":"minio","title":"MinIO","index":"16"},{"id":"ocp-cluster","title":"OCP Cluster","index":"17"}]}