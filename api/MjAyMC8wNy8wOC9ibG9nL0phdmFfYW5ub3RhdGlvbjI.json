{"title":"学习笔记：Java中的注解与反射(二)","date":"2020-07-09T05:00:00.000Z","date_formatted":{"ll":"Jul 9, 2020","L":"07/09/2020","MM-DD":"07-09"},"author":"Qingfeng Zhang","link":"2020/07/08/blog/Java_annotation2","categories":["Java"],"updated":"2025-04-13T10:50:20.878Z","content":"<blockquote>\n<p>之前招银网络的笔试考了动态代理和反射，然后最近的一面中又问了反射，虽然之前看过，但是忘得一干二净<br>\n那道笔试题中是在动态代理中使用反射进行验证，记得不是很清楚，没做出来，还是要多写写代码。</p>\n</blockquote>\n<h1 id=\"自定义注解的使用\">自定义注解的使用<a title=\"#自定义注解的使用\" href=\"#自定义注解的使用\"></a></h1>\n<ul>\n<li>自定义一个注解@MyAnnotation，其中有一个String类型的参数；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.*;  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span>  <span class=\"comment\">//注解的作用目标  </span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span>  <span class=\"comment\">//注解的保留策略  </span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span>  <span class=\"comment\">//注解可以被继承  </span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span>  <span class=\"comment\">//注解包含在javadoc中  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation&#123;  </span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span>;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<ul>\n<li>就不用简单的数据类型了，定义一个Person类作为数据；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> String city;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> gender;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//getter、setter和toString方法  </span></span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<ul>\n<li>假设在类UseAnnotation中的方法getPersonInfo上使用了这个自定义的注解；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UseAnnotation</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;xsxa&quot;</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(&quot;101&quot;)</span>  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getPersonInfo</span><span class=\"params\">(Person person)</span>&#123;  </span><br><span class=\"line\">        System.out.println(person.toString());  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>现在就是我定义了一个注解，并且把这个注解加在了我写的方法上，但是现在加这个注解并没有什么影响，注解并没有起作用，前面的笔记也说过<strong>注解本身只是起到标记的作用，注解需要反射机制，根据注解的标记去调用注解解释器执行行为</strong></p>\n<ul>\n<li>接下来就使用反射来根据的注解参数进行验证，并调用getPersonInfo方法；</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.lang.annotation.Annotation;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Field;  </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReflectCallAnnotation</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">AnnotationMethod</span><span class=\"params\">(String an,Person person)</span> <span class=\"keyword\">throws</span> IllegalAccessException, InstantiationException &#123;  </span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">use</span> <span class=\"operator\">=</span> UseAnnotation.class;  <span class=\"comment\">//获取使用了注解@MyAnnotation的类UseAnnotation的信息  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        Field[] fields = use.getDeclaredFields();  <span class=\"comment\">//获取UseAnnotatin类的所有属性  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Field f: fields)&#123;  </span><br><span class=\"line\">            System.out.println(f.getName());  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">        Method[] methods = use.getMethods();  <span class=\"comment\">//获取UseAnnotation的所有方法  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Method m: methods)&#123;  </span><br><span class=\"line\">            Annotation[] annotations = m.getDeclaredAnnotations();  <span class=\"comment\">//获取方法的注解  </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(Annotation a: annotations)&#123;  <span class=\"comment\">//遍历方法的所有注解  </span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a <span class=\"keyword\">instanceof</span> MyAnnotation)&#123;  <span class=\"comment\">//找出自定义的注解@MyAnnotation  </span></span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> ((MyAnnotation)a).value();  <span class=\"comment\">//获得使用@MyAnnotation注解时传入的参数  </span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(s.equals(an))&#123;  <span class=\"comment\">//判断MyAnnotation的参数是否与传入参数an相等  </span></span><br><span class=\"line\">                        <span class=\"comment\">//到此可以确定方法m是使用了注解@MyAnnotation且与传入的参数相等  </span></span><br><span class=\"line\">                        <span class=\"keyword\">try</span>&#123;  </span><br><span class=\"line\">                            <span class=\"comment\">//使用UseAnnotation实例对象调用方法m，参数是person  </span></span><br><span class=\"line\">                            m.invoke(use.newInstance(),person);  </span><br><span class=\"line\">                        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;  </span><br><span class=\"line\">                            e.printStackTrace();  </span><br><span class=\"line\">                        &#125;  </span><br><span class=\"line\">                    &#125;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<ul>\n<li>上面的代码的流程是：</li>\n</ul>\n<ol>\n<li>通过反射获取类的所有方法；</li>\n<li>在这些方法中找到使用了注解@MyAnnotation的方法；</li>\n<li>验证注解@MyAnnotation的参数和AnnotationMethod方法传入的参数是否相同；</li>\n<li>通过验证之后，使用反射执行这个使用了@MyAnnotation的方法；</li>\n</ol>\n<ul>\n<li>定义好这个反射执行目标方法的方法AnnotationMethod后，编写一个测试方法来使用注解：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InstantiationException, IllegalAccessException &#123;  </span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();  </span><br><span class=\"line\">        person.setName(<span class=\"string\">&quot;zhang&quot;</span>);  </span><br><span class=\"line\">        person.setAge(<span class=\"number\">24</span>);  </span><br><span class=\"line\">        person.setCity(<span class=\"string\">&quot;shanghai&quot;</span>);  </span><br><span class=\"line\">        person.setGender(<span class=\"number\">1</span>);  </span><br><span class=\"line\">        <span class=\"comment\">/**  </span></span><br><span class=\"line\"><span class=\"comment\">         * 通过AnnotationMethod反射执行UseAnnotation类中标识了注解<span class=\"doctag\">@MyAnnotation</span>的类，并验证参数  </span></span><br><span class=\"line\"><span class=\"comment\">         */</span>  </span><br><span class=\"line\">        ReflectCallAnnotation.AnnotationMethod(<span class=\"string\">&quot;101&quot;</span>,person);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>最终AnnotationMethod方法使用这个注解的参数作为验证，如果使用注解的时候参数是<code>&quot;101&quot;</code>，传入AnnotationMethod的参数也是<code>&quot;101&quot;</code>才会执行getPersonInfo方法输出person对象的信息，否则不执行；</p>\n<blockquote>\n<p>所以注解还只是一个标记，需要注解实现怎样的功能是看解析注解的反射方法如何实现；</p>\n</blockquote>\n","prev":{"title":"最小生成树算法","link":"2020/08/14/blog/minimumSpanningTree"},"next":{"title":"Java集合-初读HashMap源码","link":"2020/04/29/blog/Java_HashMap"},"plink":"https://qfzack.github.io/2020/07/08/blog/Java_annotation2/","toc":[{"id":"自定义注解的使用","title":"自定义注解的使用","index":"1"}],"reading_time":"917 words in 6 min"}