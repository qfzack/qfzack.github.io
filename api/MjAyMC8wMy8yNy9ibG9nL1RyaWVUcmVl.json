{"title":"数据结构：字典(Trie)树的实现(Java)","date":"2020-03-28T05:00:00.000Z","date_formatted":{"ll":"Mar 28, 2020","L":"03/28/2020","MM-DD":"03-28"},"author":"Qingfeng Zhang","link":"2020/03/27/blog/TrieTree","categories":["Data Structure"],"updated":"2025-04-13T10:50:20.879Z","content":"<p>字典(Trie)树又称作单词查找树，是哈希树的变种，应用于统计、排序和保存大量的字符串，常被用于搜索引擎的文本词频统计；字典树可以利用字符串的公共前缀来减少查询的时间；<br>\n<img src=\"images/TrieTree/1.jpg\" alt=\"\" loading=\"lazy\"><br>\n先定义<strong>TrieTree的节点类</strong> ，包括节点的<strong>构造方法</strong> 和对指定节点的字节点进行查找的<strong>subNode()方法</strong> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">char</span> val;  <span class=\"comment\">//节点内容  </span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> isEnd;  <span class=\"comment\">//该节点能否形成单词  </span></span><br><span class=\"line\">    <span class=\"type\">int</span> count;  <span class=\"comment\">//该节点被几个单词共享  </span></span><br><span class=\"line\">    List&lt;Node&gt; childs;  <span class=\"comment\">//子节点的集合  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//Trie树的初始化  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">char</span> c)</span>&#123;  </span><br><span class=\"line\">        val = c;  </span><br><span class=\"line\">        isEnd = <span class=\"literal\">false</span>;  </span><br><span class=\"line\">        count = <span class=\"number\">0</span>;  </span><br><span class=\"line\">        childs = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//查找当前节点的子节点中是否包含c  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Node <span class=\"title function_\">subNode</span><span class=\"params\">(<span class=\"type\">char</span> c)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(childs.size()==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Node node: childs)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(node.val==c)&#123;  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> node;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>接下来定义<strong>TrieTree类</strong> ，包括树的<strong>构造方法</strong> ，向字典树中插入一个单词的<strong>insert()方法</strong><br>\n，查找字典树中是否包含指定单词的<strong>search()方法</strong> ，从字典树中删除一个指定单词的<strong>deleteWord()方法</strong><br>\n，输出当前所有单词的<strong>printAll()方法</strong> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;  </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NO820_trieTree</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node root;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//类的构造方法  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">NO820_trieTree</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        root = <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"string\">&#x27; &#x27;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//单词的插入  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(String word)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(search(word)) <span class=\"keyword\">return</span> ;  <span class=\"comment\">//单词已存在  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: word.toCharArray())&#123;  </span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">child</span> <span class=\"operator\">=</span> cur.subNode(c);  <span class=\"comment\">//在cur的子节点中查找当前字符  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(child!=<span class=\"literal\">null</span>)&#123;  <span class=\"comment\">//子节点中包含当前字符  </span></span><br><span class=\"line\">                cur = child;  <span class=\"comment\">//更新cur指向子节点  </span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                cur.childs.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(c));  <span class=\"comment\">//在cur的子节点中添加当前字符  </span></span><br><span class=\"line\">                cur = cur.subNode(c);  <span class=\"comment\">//更新cur指向子节点  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            cur.count++;  <span class=\"comment\">//当前节点的共享单词数+1  </span></span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        cur.isEnd = <span class=\"literal\">true</span>;  <span class=\"comment\">//最后一个节点是单词的结尾  </span></span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//判断单词是否存在  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">search</span><span class=\"params\">(String word)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;  </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: word.toCharArray())&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cur.subNode(c)==<span class=\"literal\">null</span>)&#123;  <span class=\"comment\">//当前字符不存在trie中  </span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">                cur = cur.subNode(c);  <span class=\"comment\">//更新cur节点  </span></span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cur.isEnd)&#123;  <span class=\"comment\">//最后一个节点是不是单词的结尾  </span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//单词的删除  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">deleteWord</span><span class=\"params\">(String word)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!search(word)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;  <span class=\"comment\">//单词不存在  </span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> root;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: word.toCharArray())&#123;  </span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">child</span> <span class=\"operator\">=</span> cur.subNode(c);  <span class=\"comment\">//在子节点中查找当前字符  </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(child.count==<span class=\"number\">1</span>) &#123;  <span class=\"comment\">//如果当前节点只存在与word，直接删除节点就行  </span></span><br><span class=\"line\">                cur.childs.remove(child);  </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;  <span class=\"comment\">//否则移到当前字符在子节点中的位置  </span></span><br><span class=\"line\">                cur.count--;  <span class=\"comment\">//共享当前节点的单词数减一  </span></span><br><span class=\"line\">                cur = child;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        cur.isEnd = <span class=\"literal\">false</span>;  <span class=\"comment\">//当前的节点不再是单词的结尾  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//打印trie中所有的单词  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printAll</span><span class=\"params\">()</span>&#123;  </span><br><span class=\"line\">        dfs(root,<span class=\"string\">&quot;&quot;</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dfs</span><span class=\"params\">(Node node,String s)</span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node==<span class=\"literal\">null</span>) <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node.childs.size()==<span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">            System.out.println(s);  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Node n: node.childs)&#123;  </span><br><span class=\"line\">            dfs(n,s+n.val);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;  </span><br><span class=\"line\">        <span class=\"type\">NO820_trieTree</span> <span class=\"variable\">trie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NO820_trieTree</span>();  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhangqingfeng&quot;</span>;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zhangqf&quot;</span>;  </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name3</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;zackqf&quot;</span>;  </span><br><span class=\"line\">    </span><br><span class=\"line\">        trie.insert(name1);  </span><br><span class=\"line\">        trie.insert(name2);  </span><br><span class=\"line\">        trie.insert(name3);  </span><br><span class=\"line\">        trie.printAll();  </span><br><span class=\"line\">    </span><br><span class=\"line\">        trie.deleteWord(name2);  </span><br><span class=\"line\">        System.out.println(trie.search(name1));  </span><br><span class=\"line\">        System.out.println(trie.search(name2));  </span><br><span class=\"line\">        trie.printAll();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zhangqingfeng  </span><br><span class=\"line\">zhangqf  </span><br><span class=\"line\">zackqf  </span><br><span class=\"line\">true  </span><br><span class=\"line\">false  </span><br><span class=\"line\">zhangqingfeng  </span><br><span class=\"line\">zackqf  </span><br></pre></td></tr></table></figure>\n","prev":{"title":"学习笔记：Java虚拟机JVM","link":"2020/04/04/blog/Java_JVM"},"next":{"title":"学习笔记：MySQL数据库","link":"2020/03/16/blog/MySQL_learning"},"plink":"https://qfzack.github.io/2020/03/27/blog/TrieTree/","reading_time":"863 words in 6 min"}