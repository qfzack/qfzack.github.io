{"title":"NO.84&85 柱状图中的最大矩形问题","date":"2020-09-29T05:00:00.000Z","date_formatted":{"ll":"Sep 29, 2020","L":"09/29/2020","MM-DD":"09-29"},"author":"Qingfeng Zhang","link":"2020/09/28/blog/LeetCode-84&85","categories":["Algorithm"],"updated":"2025-09-14T16:04:23.643Z","content":"<p>先从一个简化的问题说起，给定一个数组，数组中的每个数表示这个位置上的柱子高度：</p>\n<p><img src=\"images/LeetCode-84&amp;85/image1.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p>现在要求的是可以在这些柱子中放下的最大矩形面积，最简单的想法就是将每个柱子作为矩形的高度，然后找找个矩形的宽度，从而计算面积；<br>\n更巧妙的方法是使用单调栈求解，单调栈是保证栈中元素递增或者递减的一个栈，递增的单调栈可以保证先出栈的值大于后出栈的值，从而保证矩形的高度至少为后出栈的元素值大小；</p>\n<ul>\n<li>每次判断当前的高度是否大于栈顶数对应的高度，如果是则将索引（便于计算矩形宽度）入栈；</li>\n<li>否则将所有小于当前高度的索引出栈，同时计算面积，取最大值；</li>\n<li>将当前数的索引入栈；</li>\n<li>最后将所有数出栈，同时计算面积，取最大值；</li>\n</ul>\n<p>单调栈连续出栈计算矩形面积的过程如下图所示：</p>\n<p><img src=\"images/LeetCode-84&amp;85/image2.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>NO.84 柱状图中最大的矩形</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">largestRectangleArea</span><span class=\"params\">(<span class=\"type\">int</span>[] heights)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heights.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();  </span><br><span class=\"line\">        stack.push(<span class=\"number\">0</span>);  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p&lt;heights.length)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; heights[p]&lt;heights[stack.peek()])&#123;  <span class=\"comment\">//如果高度小于栈顶元素的高度，则出栈  </span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> heights[stack.pop()];  </span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> stack.isEmpty()?p:p-stack.peek()-<span class=\"number\">1</span>;  </span><br><span class=\"line\">                res = Math.max(res,h*w);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            stack.push(p++);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;  <span class=\"comment\">//奖所有元素出栈，计算面积  </span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> heights[stack.pop()];~  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> stack.isEmpty()?p:p-stack.peek()-<span class=\"number\">1</span>;  </span><br><span class=\"line\">            res = Math.max(res,h*w);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>还有一个常见的问题：求一个0-1矩阵中构成的最大矩形面积，这个问题第一眼看像是动态规划问题，但是如果真的用动态规划求解，则对于每个位置都将其作为左上角，然后再计算dp矩阵，时间复杂度过高；<br>\n其实这个问题和NO.84几乎一样，就是将矩阵中连续的1看作柱子，对于每一行，计算以这行为底部的柱子的高度数组，然后就是NO.84的问题了；</p>\n<p><img src=\"images/LeetCode-84&amp;85/image3.png\" alt=\"\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>NO.85 最大矩形</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maximalRectangle</span><span class=\"params\">(<span class=\"type\">char</span>[][] matrix)</span> &#123;  </span><br><span class=\"line\">        <span class=\"type\">int</span> res= <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;matrix.length;i++)&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span>[] heights = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[matrix[<span class=\"number\">0</span>].length];  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;heights.length;k++)&#123;  </span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> i;  </span><br><span class=\"line\">                <span class=\"keyword\">while</span>(p&gt;=<span class=\"number\">0</span> &amp;&amp; matrix[p--][k]==<span class=\"string\">&#x27;1&#x27;</span>)&#123;  </span><br><span class=\"line\">                    heights[k]++;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">area</span> <span class=\"operator\">=</span> largestRectangleArea(heights);  </span><br><span class=\"line\">            res = Math.max(res,area);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">largestRectangleArea</span><span class=\"params\">(<span class=\"type\">int</span>[] heights)</span> &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heights.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">        Deque&lt;Integer&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();  </span><br><span class=\"line\">        stack.push(<span class=\"number\">0</span>);  </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(p&lt;heights.length)&#123;  </span><br><span class=\"line\">            <span class=\"keyword\">while</span>(!stack.isEmpty() &amp;&amp; heights[p]&lt;heights[stack.peek()])&#123;  </span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> heights[stack.pop()];  </span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> stack.isEmpty()?p:p-stack.peek()-<span class=\"number\">1</span>;  </span><br><span class=\"line\">                res = Math.max(res,h*w);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">            stack.push(p++);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!stack.isEmpty())&#123;  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> heights[stack.pop()];  </span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> stack.isEmpty()?p:p-stack.peek()-<span class=\"number\">1</span>;  </span><br><span class=\"line\">            res = Math.max(res,h*w);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"通过jupyterlab使用远程服务器的Texlive","link":"2020/10/10/blog/ubuntu-texlive"},"next":{"title":"最小生成树算法","link":"2020/08/14/blog/minimumSpanningTree"},"plink":"https://qfzack.github.io/2020/09/28/blog/LeetCode-84&85/","reading_time":"781 words in 5 min"}