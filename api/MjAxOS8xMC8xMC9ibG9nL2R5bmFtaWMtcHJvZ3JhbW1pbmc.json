{"title":"Python-动态规划算法","date":"2019-10-11T05:00:00.000Z","date_formatted":{"ll":"Oct 11, 2019","L":"10/11/2019","MM-DD":"10-11"},"author":"Qingfeng Zhang","link":"2019/10/10/blog/dynamic-programming","categories":["Algorithm"],"updated":"2025-04-13T10:56:50.175Z","content":"<h2 id=\"一、方法概述\">一、方法概述<a title=\"#一、方法概述\" href=\"#一、方法概述\"></a></h2>\n<p>动态规划是把复杂问题分解为简单的问题进行求解，适用于有重叠子问题和最优子结构性质（问题的最优解包含其子问题的最优解）的问题；<br>\n先描述最优解的结构，递归定义最优解的值，再按照自底向上的方式计算最优解的值，最后由计算的结果构造最优解；</p>\n<ul>\n<li>例子：<br>\n看一个问题：给定一个数组，可以任意取不相邻的元素，求取出的元素和的最大值；<br>\n对于每一个数都有两种选择：选或不选这个数；<br>\n假设是数组从左往右选，并且选元素i的最大和为opt()，则opt(i)=max(opt(i-2)+i,opt(i-1));<br>\n按照这个规则，从左往右计算数组的opt值，则最后一个元素的opt就是最终的结果;<br>\ndp的第i个位置表示在数组L中从L[0]找到L[i]的时候可以得到的最大和<br>\n求解代码：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>]  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rec_opt</span>(<span class=\"params\">L, i</span>):  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> L[<span class=\"number\">0</span>]  </span><br><span class=\"line\">    <span class=\"keyword\">elif</span> i == <span class=\"number\">1</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(L[<span class=\"number\">0</span>],L[<span class=\"number\">1</span>])  </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:  </span><br><span class=\"line\">        A = rec_opt(L, i-<span class=\"number\">2</span>)+L[i]  </span><br><span class=\"line\">        B = rec_opt(L, i-<span class=\"number\">1</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(A,B)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dp_opt</span>(<span class=\"params\">L</span>):  </span><br><span class=\"line\">    dp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> L]  </span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = L[<span class=\"number\">0</span>]  </span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(L[<span class=\"number\">0</span>],L[<span class=\"number\">1</span>])  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"built_in\">len</span>(L)):  </span><br><span class=\"line\">        A = dp[i-<span class=\"number\">2</span>]+L[i]  </span><br><span class=\"line\">        B = dp[i-<span class=\"number\">1</span>]  </span><br><span class=\"line\">        dp[i] = <span class=\"built_in\">max</span>(A,B)  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h2 id=\"二、方法实例\">二、方法实例<a title=\"#二、方法实例\" href=\"#二、方法实例\"></a></h2>\n<h3 id=\"no.62-不同路径\">NO.62 不同路径<a title=\"#no.62-不同路径\" href=\"#no.62-不同路径\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个数组，从数组的左上角出发走到数组的右下角，求一共有多少中不同的路径；</p>\n</li>\n<li>\n<p>思路分析<br>\n到数组中一个位置[i,j]的路径数应该等于到位置[i-1,j]的路径数加上到[i,j-1]的路径数，因此这就是一个动态规划的问题；<br>\n先用1初始化一个相同大小的dp数组，因为dp的到第一行和第一列的每个位置都只有一种路径，因此这些位置的dp值都为1，从dp[i,j]开始按行的顺序计算每个位置的值<code>dp[i][j] = dp[i][j-1]+dp[i-1][j]</code>；<br>\n最终的结果就是dp[-1][-1]位置的值</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">uniquePaths</span>(<span class=\"params\">self, m: <span class=\"built_in\">int</span>, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = [[<span class=\"number\">1</span>]*m <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n):  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,m):  </span><br><span class=\"line\">                dp[i][j] = dp[i][j-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">1</span>][j]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.64-最小路径和\">NO.64 最小路径和<a title=\"#no.64-最小路径和\" href=\"#no.64-最小路径和\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n对于一个[m,n]大小的网格，每个位置的元素值表示到达该位置的路径长度，要求找出从[0,0]位置到[-1,-1]（右下角元素）的最短路径</p>\n</li>\n<li>\n<p>思路分析<br>\n这是使用动态规划的一道基础题<br>\n以0初始化一个数组dp，dp是一个和grid大小相同的数组，dp中每个位置[i,j]的元素表示从grid[0,0]到grid[i,j]的最短路径<br>\n对于dp的第一行和第一列元素，只有唯一的选择，因此这些位置的值是确定的，因此先对dp第一行和第一列的值进行计算<br>\n对于dp其它位置的值，需要根据该位置上面和右边的dp元素值取最小，来计算得到当前位置的dp值<br>\n当遍历完grid的所有元素，到达每个位置的最短路径也就确定了，因此到达最后一个位置的最短路径是dp[-1,-1]</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minPathSum</span>(<span class=\"params\">self, grid: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        row = <span class=\"built_in\">len</span>(grid)  </span><br><span class=\"line\">        col = <span class=\"built_in\">len</span>(grid[<span class=\"number\">0</span>])  </span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>]*col <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(row)]  </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = grid[<span class=\"number\">0</span>][<span class=\"number\">0</span>]  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,row):  </span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]+grid[i][<span class=\"number\">0</span>]  <span class=\"comment\">#得到dp的第一列，表示到[i][0]的路径和  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,col):  </span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][j] = dp[<span class=\"number\">0</span>][j-<span class=\"number\">1</span>]+grid[<span class=\"number\">0</span>][j]  <span class=\"comment\">#得到dp的第一行，表示到[0][i]的路径和  </span></span><br><span class=\"line\">        <span class=\"comment\">#因为到grid第一行和第一列的每个位置都只有唯一选择，因此路径和固定  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,row):  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,col):  </span><br><span class=\"line\">                dp[i][j] = <span class=\"built_in\">min</span>(dp[i-<span class=\"number\">1</span>][j],dp[i][j-<span class=\"number\">1</span>]) + grid[i][j]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.198-打家劫舍\">NO.198 打家劫舍<a title=\"#no.198-打家劫舍\" href=\"#no.198-打家劫舍\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个数组，每个元素表示可以在这里打劫获得的金钱，但是不能打劫相邻的两家，求最后可以得到的最多金钱</p>\n</li>\n<li>\n<p>思路分析<br>\n动态规划的一道简单题，但是思路很好，简单来说就是在一个数组中，找一些不相邻的数使得这些数的和最大；<br>\n使用dp数组，dp[i]表示从0到i可以选的数和的最大值，先初始化dp[0]=nums[0],dp[1]=max(nums[0],nums[1])；<br>\n从第三个元素开始遍历nums，也就是对于当前的这个数，有两种选择：</p>\n</li>\n</ul>\n<p>1.选这个数，那么选前前一个数和这个数，将它们的和作为当前的dp值（表示打劫这一家和前前一家）；<br>\n2.不选这个数，那么选前一个数，将前一个数做为当前的dp值（表示不打劫这一家，因此得到的钱不变）；<br>\n选取上面两种情况中最大的作为当前的dp值，遍历nums结束即得到结果</p>\n<ul>\n<li>求解代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">rob</span>(<span class=\"params\">self, nums</span>):  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums)==<span class=\"number\">0</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums)&lt;=<span class=\"number\">2</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(nums)  </span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>]*<span class=\"built_in\">len</span>(nums)  </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>],dp[<span class=\"number\">1</span>] = nums[<span class=\"number\">0</span>],<span class=\"built_in\">max</span>(nums[<span class=\"number\">0</span>],nums[<span class=\"number\">1</span>])  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"built_in\">len</span>(nums)):  </span><br><span class=\"line\">            dp[i] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>],dp[i-<span class=\"number\">2</span>]+nums[i])  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.279-完全平方数\">NO.279 完全平方数<a title=\"#no.279-完全平方数\" href=\"#no.279-完全平方数\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个数字n，要求将数字n分解成几个平方数的和，并要求平方数的个数最少；</p>\n</li>\n<li>\n<p>思路分析<br>\n应用动态规划的思想，可以将原问题进行分解得到重叠子问题，以n=13为例，设opt(13)表示和为13的平方数的最小个数，则：<br>\nopt(13)=min(opt(13),opt(12)+1,opt(9)+1,opt(4)+1)，即13减掉1<em>1,2</em>2,3*3，再与opt(13)取最小（我的理解是需要求最小值，但是需要一个初始值opt(13)进行比较）；<br>\n对于opt(12),opt(9),opt(4)就可以看成opt(13)的重叠子问题进行求解；<br>\n因此，遍历数组[1:n]，求解对应dp数组的opt值，即可得到结果，过程如下：<br>\n<img src=\"images/dynamic-programming/dp1.jpg\" alt=\"\" loading=\"lazy\"></p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numSquares</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = [n <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n+<span class=\"number\">1</span>)]  </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>):  </span><br><span class=\"line\">            j = <span class=\"number\">1</span>  </span><br><span class=\"line\">            <span class=\"keyword\">while</span> i-j*j &gt;= <span class=\"number\">0</span>:  </span><br><span class=\"line\">                dp[i] = <span class=\"built_in\">min</span>(dp[i],dp[i-j*j]+<span class=\"number\">1</span>)  </span><br><span class=\"line\">                j += <span class=\"number\">1</span>  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.393-最佳买股票时机含冷冻期\">NO.393 最佳买股票时机含冷冻期<a title=\"#no.393-最佳买股票时机含冷冻期\" href=\"#no.393-最佳买股票时机含冷冻期\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个数组，每个数表示一天股票的价格，每天可以买入或者卖出股票，但是前一天卖出不能在下一天买入，求最后可以获得的最大利润；</p>\n</li>\n<li>\n<p>思路分析<br>\n又是一个股票的问题，与基本股票问题的区别在于包含冷冻期，即卖掉之后不能立即买入；<br>\n每一天的状态有两种：持有股票和不持有股票；<br>\n如果某天持有股票，可能是前一天就持有股票，也可能是前一天不持有，当天买入股票（并且前一天不能卖出，如果前一天有卖出，那么就看前前一天不持有股票的利润，如果前一天没卖出，那么其实利润和前前一天是一样的，因此，直接看前前一天不持有股票的利润就行）；<br>\n因此，设置两个与prices等长的数组hold和nothold，分别记录每一天持有和不持有股票时的总利润；<br>\n如果某天不持有股票，可能是前一天就不持有股票，也可能是前一天持有，当天卖掉股票；<br>\n遍历一遍prices，最后的结果就是最后一天不持有股票的利润；</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(prices)==<span class=\"number\">0</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>  </span><br><span class=\"line\">        hold = [<span class=\"number\">0</span>]*<span class=\"built_in\">len</span>(prices)  </span><br><span class=\"line\">        nothold = hold.copy()  </span><br><span class=\"line\">        hold[<span class=\"number\">0</span>] = -prices[<span class=\"number\">0</span>]  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(prices)):  </span><br><span class=\"line\">            hold[i] = <span class=\"built_in\">max</span>(hold[i-<span class=\"number\">1</span>],nothold[i-<span class=\"number\">2</span>]-prices[i])  </span><br><span class=\"line\">            nothold[i] = <span class=\"built_in\">max</span>(nothold[i-<span class=\"number\">1</span>],hold[i-<span class=\"number\">1</span>]+prices[i])  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> nothold[-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.712-两个字符串的最小ascii删除和\">NO.712 两个字符串的最小ASCII删除和<a title=\"#no.712-两个字符串的最小ascii删除和\" href=\"#no.712-两个字符串的最小ascii删除和\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定两个字符串，删去两个字符串的一些元素可以使得这两个字符串相等，求删去的这些字符的ASCII值的和；</p>\n</li>\n<li>\n<p>思路分析<br>\n一开始以为只要找出两个字符串之间相同的字符，再将两个字符串相同元素之外的元素进行ASCII求和就可以得到结果，但是最后才发现删除之后两个字符串的元素排列也要相同（不只是元素相同）；<br>\n正确的解法还是动态规划；以s1 = ‘seerda’，s2 = ‘eafert’为例：<br>\n先用0初始化一个数组，数组的[i,j]表示要使s1[i-1:]和s2[j-1:]相等所要删去的字符的ASCII值的和；<br>\n可以先求得dp最后一行的值，此时s2[len(s2)-1:]为空；<br>\n再求dp最后一列的值，此使s1[len(s1)-1:]为空；<br>\n对于dp其他位置的值，同时遍历s1和s2，如果当前遍历的两个值相同，则dp[i][j]与dp[i+1][j+1]相等，否则取dp[i+1][j]+ord(s1[i])和dp[i][j+1]+ord(s2[j])的最小值；<br>\n当i,j循环到[5,1]的时候，dp[5][1]表示s1[5:] (‘a)和s2[1:]<br>\n(‘afert’)达到相等时需要删去的字符的ASCII值的和，结果与使’’和’fert’相等的</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minimumDeleteSum</span>(<span class=\"params\">self, s1: <span class=\"built_in\">str</span>, s2: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>]*(<span class=\"built_in\">len</span>(s2)+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s1)+<span class=\"number\">1</span>)]  </span><br><span class=\"line\">          </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s1)-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):  </span><br><span class=\"line\">            dp[i][<span class=\"built_in\">len</span>(s2)] = dp[i+<span class=\"number\">1</span>][<span class=\"built_in\">len</span>(s2)]+<span class=\"built_in\">ord</span>(s1[i])  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s2)-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):  </span><br><span class=\"line\">            dp[<span class=\"built_in\">len</span>(s1)][j] = dp[<span class=\"built_in\">len</span>(s1)][j+<span class=\"number\">1</span>]+<span class=\"built_in\">ord</span>(s2[j])  </span><br><span class=\"line\">              </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s1)-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(s2)-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> s1[i]==s2[j]:  </span><br><span class=\"line\">                    dp[i][j] = dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]  </span><br><span class=\"line\">                <span class=\"keyword\">else</span>:  </span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">min</span>(dp[i+<span class=\"number\">1</span>][j]+<span class=\"built_in\">ord</span>(s1[i]),dp[i][j+<span class=\"number\">1</span>]+<span class=\"built_in\">ord</span>(s2[j]))  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.714-买股票的最佳时机含手续费\">NO.714 买股票的最佳时机含手续费<a title=\"#no.714-买股票的最佳时机含手续费\" href=\"#no.714-买股票的最佳时机含手续费\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个数组，表示股票价格的变化，可以在某一时刻买入股票，另一时刻卖出（会有手续费），求可以获得的最大利润；</p>\n</li>\n<li>\n<p>思路分析<br>\n关于股票的问题Leetcode上有一个非常好的总结：<a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-2\" target=\"_blank\">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/solution/yi-ge-fang-fa-tuan-mie-6-dao-gu-piao-wen-ti-by-l-2</a><br>\n之前只知道动态规划是可以把问题分解为子问题，然后求解子问题得到最终的解，这道题中，可以遍历prices列表；<br>\n对于每个值都可以看成一个子问题，即求在当前值可获得的最大利润，但是每个值可以是买入（前提是已卖出），可以是卖出（前提是已买入），也可以是无操作；<br>\n对于每个子问题，可以通过两个变量来记录其结果：<br>\n一个变量是记录在当前状态，如果持有股票的情况下其最大利润，这种情况可能是上一个状态就持有股票，也可能是上一个状态不持有，当前状态买入的，求最大值：max(dp[i-1][0],<br>\ndp[i-1][1]+prices[i]-fee)<br>\n另一个变量是记录在当前状态，如果不持有股票的情况下其最大利润，这种情况可能是上一个状态就不持有股票，也可能是上一个状态持有股票，当前状态卖出的，求最大值：max(dp[i-1][1],<br>\ndp[i-1][0]-prices[i])<br>\n由此可以对每个子问题求解，遍历prices直到最后一个值，其不持有股票的变量值就是最终的结果；</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], fee: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(prices))]  </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>  <span class=\"comment\">#第一步就不持有，总利润为0  </span></span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = -prices[<span class=\"number\">0</span>]  <span class=\"comment\">#第一步就买入，总费用减去第一个股票价格  </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(prices)):  </span><br><span class=\"line\">            dp[i][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>], dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>]+prices[i]-fee)  <span class=\"comment\">#当前不持有可能是上一步不持有，或是上一步持有，在当前一步卖掉  </span></span><br><span class=\"line\">            dp[i][<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>][<span class=\"number\">1</span>], dp[i-<span class=\"number\">1</span>][<span class=\"number\">0</span>]-prices[i])  <span class=\"comment\">#当前持有可能是上一步持有，或是上一步不持有，在当前一步买入  </span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>][<span class=\"number\">0</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.718-最长重复子数组\">NO.718 最长重复子数组<a title=\"#no.718-最长重复子数组\" href=\"#no.718-最长重复子数组\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定两个数组，求最长的公共子数组；</p>\n</li>\n<li>\n<p>思路分析<br>\n最简单的方法就是暴力循环，但是这样做的时间和空间复杂度较高；<br>\n比较合适的方法是使用动态规划，很久没做动态规划了，最重要的是找出状态转移方程，然后用状态转移方程去更新dp数组，最后的答案就在dp数组里；<br>\n这里的状态转移方程需要从后往前遍历，即A[i:]和B[j:]的最长公共数组是由A[i+1:]和B[j+1:]决定的，分两种情况：</p>\n</li>\n</ul>\n<p>1.如果A[i]!=B[j]，那么A[i:],B[j:]的最长公共数组和A[i+1:],B[j+1:]的一样；<br>\n2.如果A[i]==B[j]，那么A[i:],B[j:]的最长公共数组要在A[i+1:],B[j+1:]的基础上加1；<br>\n对于dp数组，将其初始化为0，并且dp[:][-1]和dp[-1][:]的值就是为0，不用更新；<br>\n问题的求解过程如下图所示：<br>\n<img src=\"images/dynamic-programming/dp2.jpg\" alt=\"\" loading=\"lazy\"><br>\n一般动态规划的问题需要找到当前状态最优值与前一状态最优值之间的关系，由此得到状态转移方程，并且不同问题的dp数组形式由有些不同，一般为二维数组，也有多个一维数组的，比如股票问题；</p>\n<ul>\n<li>求解代码</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">findLength</span>(<span class=\"params\">self, A: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], B: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>]*(<span class=\"built_in\">len</span>(A)+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(B)+<span class=\"number\">1</span>)]  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(A)-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(B)-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,-<span class=\"number\">1</span>):  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> A[i]==B[j]:  </span><br><span class=\"line\">                    dp[i][j] = dp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]+<span class=\"number\">1</span>  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>([<span class=\"built_in\">max</span>(l) <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> dp])  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.740-删除获得的点数\">NO.740 删除获得的点数<a title=\"#no.740-删除获得的点数\" href=\"#no.740-删除获得的点数\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个数组，其中会有重复的元素，可以选定其中一个数i，得到点数i，删除这个值，然后删除所有的i+1和i-1，直到所有的数都删完，可以得到的最大点数是多少</p>\n</li>\n<li>\n<p>思路分析<br>\n用动态规划进行求解，与NO.198 打家劫舍非常相似，但是打家劫舍是位置相邻，这里是数值相邻；<br>\n先对nums去重排序得到l，用C记录其中每个元素出现的次数，如果选中一个3，删除2和4，那么剩下的所有3都会被选；<br>\n建立dp数组，每个值记录当前可以获得的最大点数；<br>\n对于l，每次需要判断是否与前一个数字相差1，是的话就和打家劫舍的思路一致，否则直接加上当前的数值乘以其个数；</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">deleteAndEarn</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        l = [<span class=\"number\">0</span>,<span class=\"number\">0</span>] + <span class=\"built_in\">sorted</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">set</span>(nums)))  </span><br><span class=\"line\">        C = [nums.count(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> l]  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(l)==<span class=\"number\">0</span>:  </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>  </span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>]*<span class=\"built_in\">len</span>(l)  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"built_in\">len</span>(l)):  </span><br><span class=\"line\">            <span class=\"keyword\">if</span> l[i]-<span class=\"number\">1</span>==l[i-<span class=\"number\">1</span>]:  </span><br><span class=\"line\">                dp[i] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>],dp[i-<span class=\"number\">2</span>]+l[i]*C[i])  </span><br><span class=\"line\">            <span class=\"keyword\">else</span>:  </span><br><span class=\"line\">                dp[i] = dp[i-<span class=\"number\">1</span>]+l[i]*C[i]  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n<h3 id=\"no.931-下降路径的最小和\">NO.931 下降路径的最小和<a title=\"#no.931-下降路径的最小和\" href=\"#no.931-下降路径的最小和\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个二维数组，可以从第一行任意一个位置开始走到最后一行，每次下降一行，但是不能一次跨过两列，求走到最后一行时经过所有位置数和的最小值；</p>\n</li>\n<li>\n<p>思路分析<br>\n先初始化一个dp数组，这里可以直接复制A，因为计算dp的元素值的时候也会用到A的元素值，dp的第一行等于A的第一行，因此，从dp的第二行开始计算：<br>\ndp每一个位置的值等于其自身加上其上方，左上方（如果存在），右上方（如果存在）的最小值，依次计算dp每个位置的值，最后返回dp最后一行的最小值就是结果；</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minFallingPathSum</span>(<span class=\"params\">self, A: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = A.copy()  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(A)):  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(A[i])):  </span><br><span class=\"line\">                <span class=\"keyword\">if</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> j+<span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(A[i]):  </span><br><span class=\"line\">                    dp[i][j] += <span class=\"built_in\">min</span>(A[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>],A[i-<span class=\"number\">1</span>][j],A[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>])  </span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j &gt; <span class=\"number\">0</span>:  </span><br><span class=\"line\">                    dp[i][j] += <span class=\"built_in\">min</span>(A[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>],A[i-<span class=\"number\">1</span>][j])  </span><br><span class=\"line\">                <span class=\"keyword\">elif</span> j+<span class=\"number\">1</span> &lt; <span class=\"built_in\">len</span>(A[i]):  </span><br><span class=\"line\">                    dp[i][j] += <span class=\"built_in\">min</span>(A[i-<span class=\"number\">1</span>][j],A[i-<span class=\"number\">1</span>][j+<span class=\"number\">1</span>])  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(A[-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"no.983-最低票价\">NO.983 最低票价<a title=\"#no.983-最低票价\" href=\"#no.983-最低票价\"></a></h3>\n<ul>\n<li>\n<p>问题描述<br>\n给定一个升序排列的数组，其中每个数字表示1-365天中的一天，现在又三种票：日票，月票，周票，要买票使得在数组中的日期中都持有票，求最少的花费</p>\n</li>\n<li>\n<p>问题分析<br>\n典型的动态规划问题，先定义一个dp数组，dp[i]表示<strong>从days[1]开始到days[i]所要花费的票</strong><br>\n,i=0,1,2,……,len(days)，因此dp[0]=0;<br>\n每一天都可以买日票，周票，月票，但是有时候买周票或月票不划算，有时候没必要买日票，因此取三种情况的最小值；<br>\n因为周票可以用7天，月票可以用30天，因此在遍历的时候看是不是已经过了7天或30天；<br>\n如果已经过了7天，那么用7天前买的票就可以了，如果过了30天，那么用30天前买的票就可以了，这里用week记录最接近7天的日期，用month记录最接近30天的日期；<br>\n动态规划的计算公式为：<br>\n<code>dp[i+1] = min(dp[i]+costs[0],dp[week]+costs[1],dp[month]+costs[2])</code><br>\n因此可以将原问题分解为子问题，转换为对子问题的求解</p>\n</li>\n<li>\n<p>求解代码</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:  </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mincostTickets</span>(<span class=\"params\">self, days: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], costs: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:  </span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>]*(<span class=\"built_in\">len</span>(days)+<span class=\"number\">1</span>)  </span><br><span class=\"line\">        week, month = <span class=\"number\">0</span>, <span class=\"number\">0</span>  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(days)):  </span><br><span class=\"line\">            <span class=\"keyword\">while</span> days[week]+<span class=\"number\">6</span> &lt; days[i]:  </span><br><span class=\"line\">                week += <span class=\"number\">1</span>  </span><br><span class=\"line\">            <span class=\"keyword\">while</span> days[month]+<span class=\"number\">29</span> &lt; days[i]:  </span><br><span class=\"line\">                month += <span class=\"number\">1</span>  </span><br><span class=\"line\">            dp[i+<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[i]+costs[<span class=\"number\">0</span>],dp[week]+costs[<span class=\"number\">1</span>],dp[month]+costs[<span class=\"number\">2</span>])  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]  </span><br></pre></td></tr></table></figure>\n","prev":{"title":"Python-回溯算法","link":"2019/10/10/blog/backtracking"},"plink":"https://qfzack.github.io/2019/10/10/blog/dynamic-programming/","toc":[{"id":"一、方法概述","title":"一、方法概述","index":"1"},{"id":"二、方法实例","title":"二、方法实例","index":"2","children":[{"id":"no.62-不同路径","title":"NO.62 不同路径","index":"2.1"},{"id":"no.64-最小路径和","title":"NO.64 最小路径和","index":"2.2"},{"id":"no.198-打家劫舍","title":"NO.198 打家劫舍","index":"2.3"},{"id":"no.279-完全平方数","title":"NO.279 完全平方数","index":"2.4"},{"id":"no.393-最佳买股票时机含冷冻期","title":"NO.393 最佳买股票时机含冷冻期","index":"2.5"},{"id":"no.712-两个字符串的最小ascii删除和","title":"NO.712 两个字符串的最小ASCII删除和","index":"2.6"},{"id":"no.714-买股票的最佳时机含手续费","title":"NO.714 买股票的最佳时机含手续费","index":"2.7"},{"id":"no.718-最长重复子数组","title":"NO.718 最长重复子数组","index":"2.8"},{"id":"no.740-删除获得的点数","title":"NO.740 删除获得的点数","index":"2.9"},{"id":"no.931-下降路径的最小和","title":"NO.931 下降路径的最小和","index":"2.10"},{"id":"no.983-最低票价","title":"NO.983 最低票价","index":"2.11"}]}],"reading_time":"4708 words in 31 min"}